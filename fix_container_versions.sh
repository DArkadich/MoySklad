#!/bin/bash

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–ï–†–°–ò–ô –ë–ò–ë–õ–ò–û–¢–ï–ö –í –ö–û–ù–¢–ï–ô–ù–ï–†–ï"
echo "=============================================="

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ML-—Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose stop forecast-api moysklad-service

# –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤
echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker rmi moysklad-forecast-api moysklad-moysklad-service 2>/dev/null || echo "   –û–±—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt —Å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

cat > services/moysklad-service/requirements.txt << 'EOF'
# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏)
pandas==2.1.4
numpy==1.26.2
scikit-learn==1.3.2
joblib==1.3.2
requests==2.31.0
httpx==0.24.1
aiohttp==3.8.5
python-dotenv==1.0.0
psycopg2-binary==2.9.7
redis==4.6.0
celery==5.3.1

# FastAPI –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
fastapi==0.103.1
uvicorn[standard]==0.23.2
pydantic==2.3.0

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
structlog==23.1.0
prometheus-client==0.17.1

# –£—Ç–∏–ª–∏—Ç—ã
python-dateutil==2.8.2
pytz==2023.3
EOF

echo "‚úÖ requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω"

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏..."
docker-compose build --no-cache forecast-api moysklad-service

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose up -d forecast-api moysklad-service

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 45

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
echo "   forecast-api:"
curl -s http://localhost:8001/health | jq . 2>/dev/null || echo "   –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo "   moysklad-service:"
curl -s http://localhost:8000/health | jq . 2>/dev/null || echo "   –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
echo "ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π..."
echo "   –õ–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:"
docker-compose logs forecast-api --tail=15 | grep -E "(model|load|error|numpy|INFO|ERROR)" | head -5

# –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
echo "üß™ –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è..."
TEST_RESPONSE=$(curl -s -X POST http://localhost:8001/forecast \
  -H "Content-Type: application/json" \
  -d '{"product_code":"30001","forecast_days":30}' 2>/dev/null)

if [ $? -eq 0 ] && [ ! -z "$TEST_RESPONSE" ]; then
    echo "‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    echo "   –û—Ç–≤–µ—Ç: $TEST_RESPONSE" | head -c 300
    echo "..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ ML-–º–æ–¥–µ–ª–∏
    if echo "$TEST_RESPONSE" | grep -q '"models_used":\["fallback"\]'; then
        echo "‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º (ML-–º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)"
        echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs forecast-api"
    else
        echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è ML-–º–æ–¥–µ–ª–∏!"
    fi
else
    echo "‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "   –û—à–∏–±–∫–∞: $TEST_RESPONSE"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
echo "   NumPy –≤–µ—Ä—Å–∏—è:"
docker exec forecast-api python -c "import numpy; print(numpy.__version__)" 2>/dev/null || echo "   –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo "   Scikit-learn –≤–µ—Ä—Å–∏—è:"
docker exec forecast-api python -c "import sklearn; print(sklearn.__version__)" 2>/dev/null || echo "   –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo ""
echo "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:"
echo "   ‚Ä¢ ./check_models_status.sh - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π"
echo "   ‚Ä¢ docker-compose logs forecast-api - –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"
echo "   ‚Ä¢ curl -s http://localhost:8001/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è" 