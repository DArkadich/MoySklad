#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Horiens Purchase Agent
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, List

class SystemTester:
    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.services = {
            "api-gateway": "http://localhost:8000",
            "purchase-service": "http://localhost:8001", 
            "ml-service": "http://localhost:8002",
            "moysklad-service": "http://localhost:8003",
            "notification-service": "http://localhost:8004",
            "analytics-service": "http://localhost:8005"
        }
    
    async def test_service_health(self, service_name: str, url: str) -> Dict:
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{url}/health")
                if response.status_code == 200:
                    return {
                        "service": service_name,
                        "status": "healthy",
                        "response": response.json()
                    }
                else:
                    return {
                        "service": service_name,
                        "status": "unhealthy",
                        "error": f"HTTP {response.status_code}"
                    }
        except Exception as e:
            return {
                "service": service_name,
                "status": "error",
                "error": str(e)
            }
    
    async def test_all_services(self) -> List[Dict]:
        """–¢–µ—Å—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
        results = []
        
        for service_name, url in self.services.items():
            result = await self.test_service_health(service_name, url)
            results.append(result)
            status_icon = "‚úÖ" if result["status"] == "healthy" else "‚ùå"
            print(f"{status_icon} {service_name}: {result['status']}")
        
        return results
    
    async def test_purchase_endpoints(self) -> Dict:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∑–∞–∫—É–ø–æ–∫"""
        print("\nüõí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∑–∞–∫—É–ø–æ–∫...")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            try:
                response = await client.get(f"{self.base_url}/api/v1/products")
                if response.status_code == 200:
                    print("‚úÖ GET /api/v1/products - —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå GET /api/v1/products - –æ—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"‚ùå GET /api/v1/products - –æ—à–∏–±–∫–∞: {e}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–ª–∞–¥–∞
            try:
                response = await client.get(f"{self.base_url}/api/v1/inventory/status")
                if response.status_code == 200:
                    print("‚úÖ GET /api/v1/inventory/status - —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå GET /api/v1/inventory/status - –æ—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"‚ùå GET /api/v1/inventory/status - –æ—à–∏–±–∫–∞: {e}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            try:
                response = await client.get(f"{self.base_url}/api/v1/purchase/recommendations")
                if response.status_code == 200:
                    print("‚úÖ GET /api/v1/purchase/recommendations - —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå GET /api/v1/purchase/recommendations - –æ—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"‚ùå GET /api/v1/purchase/recommendations - –æ—à–∏–±–∫–∞: {e}")
    
    async def test_ml_endpoints(self) -> Dict:
        """–¢–µ—Å—Ç ML —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            # –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                response = await client.get(f"{self.base_url}/api/v1/ml/forecast/test-product")
                if response.status_code == 200:
                    print("‚úÖ GET /api/v1/ml/forecast/{product_id} - —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå GET /api/v1/ml/forecast/{product_id} - –æ—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"‚ùå GET /api/v1/ml/forecast/{product_id} - –æ—à–∏–±–∫–∞: {e}")
    
    async def test_analytics_endpoints(self) -> Dict:
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            # –¢–µ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞
            try:
                response = await client.get(f"{self.base_url}/api/v1/analytics/dashboard/summary")
                if response.status_code == 200:
                    print("‚úÖ GET /api/v1/analytics/dashboard/summary - —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå GET /api/v1/analytics/dashboard/summary - –æ—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"‚ùå GET /api/v1/analytics/dashboard/summary - –æ—à–∏–±–∫–∞: {e}")
    
    async def test_notification_endpoints(self) -> Dict:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            try:
                test_data = {
                    "type": "telegram",
                    "message": "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã Horiens Purchase Agent",
                    "recipients": []
                }
                response = await client.post(
                    f"{self.base_url}/api/v1/notifications/send",
                    json=test_data
                )
                if response.status_code == 200:
                    print("‚úÖ POST /api/v1/notifications/send - —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå POST /api/v1/notifications/send - –æ—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"‚ùå POST /api/v1/notifications/send - –æ—à–∏–±–∫–∞: {e}")
    
    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Horiens Purchase Agent")
        print("=" * 60)
        
        # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
        health_results = await self.test_all_services()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        healthy_count = sum(1 for r in health_results if r["status"] == "healthy")
        total_count = len(health_results)
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print(f"‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {healthy_count}/{total_count}")
        
        if healthy_count == total_count:
            print("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
            # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            await self.test_purchase_endpoints()
            await self.test_ml_endpoints()
            await self.test_analytics_endpoints()
            await self.test_notification_endpoints()
            
            print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker.")
        
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
        print(f"üåê API Gateway: http://localhost:8000")
        print(f"üìä Grafana Dashboard: http://localhost:3000 (admin/admin)")
        print(f"üê∞ RabbitMQ Management: http://localhost:15672 (guest/guest)")
        print(f"üìà Prometheus: http://localhost:9090")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SystemTester()
    await tester.run_full_test()

if __name__ == "__main__":
    asyncio.run(main()) 