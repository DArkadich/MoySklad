#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
"""

import pickle
import os
from datetime import datetime

def analyze_model_structure():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –ú–û–î–ï–õ–ò")
    print("=" * 50)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now()}")
    print()
    
    model_path = "data/universal_forecast_models.pkl"
    
    if not os.path.exists(model_path):
        print(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
        return
    
    try:
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑: {model_path}")
        with open(model_path, 'rb') as f:
            model_data = pickle.load(f)
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(model_data)}")
        
        if isinstance(model_data, dict):
            print(f"   –ö–ª—é—á–∏: {list(model_data.keys())}")
            
            for key, value in model_data.items():
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–∞: {key}")
                print(f"   –¢–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è: {type(value)}")
                
                if isinstance(value, dict):
                    print(f"   –ü–æ–¥–∫–ª—é—á–∏: {list(value.keys())}")
                    
                    for sub_key, sub_value in value.items():
                        print(f"     {sub_key}: {type(sub_value)}")
                        if hasattr(sub_value, 'predict'):
                            print(f"       ‚úÖ –ò–º–µ–µ—Ç –º–µ—Ç–æ–¥ predict (–º–æ–¥–µ–ª—å)")
                        elif hasattr(sub_value, 'fit'):
                            print(f"       ‚úÖ –ò–º–µ–µ—Ç –º–µ—Ç–æ–¥ fit (–æ–±—É—á–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç)")
                        elif isinstance(sub_value, (list, tuple)):
                            print(f"       üìä –†–∞–∑–º–µ—Ä: {len(sub_value)}")
                        elif isinstance(sub_value, str):
                            print(f"       üìù –°—Ç—Ä–æ–∫–∞: {sub_value[:50]}...")
                        elif isinstance(sub_value, (int, float)):
                            print(f"       üî¢ –ß–∏—Å–ª–æ: {sub_value}")
                
                elif hasattr(value, 'predict'):
                    print(f"   ‚úÖ –ü—Ä—è–º–∞—è –º–æ–¥–µ–ª—å —Å –º–µ—Ç–æ–¥–æ–º predict")
                    print(f"     –¢–∏–ø –º–æ–¥–µ–ª–∏: {type(value).__name__}")
                
                elif isinstance(value, (list, tuple)):
                    print(f"   üìä –°–ø–∏—Å–æ–∫/–∫–æ—Ä—Ç–µ–∂ —Ä–∞–∑–º–µ—Ä–æ–º: {len(value)}")
                    if len(value) > 0:
                        print(f"     –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(value[0])}")
                
                elif isinstance(value, str):
                    print(f"   üìù –°—Ç—Ä–æ–∫–∞: {value[:100]}...")
                
                else:
                    print(f"   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {type(value)}")
        
        # –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π
        print(f"\nü§ñ –ü–û–ò–°–ö –ú–û–î–ï–õ–ï–ô –í –î–ê–ù–ù–´–•")
        print("=" * 30)
        
        models_found = []
        
        def find_models(data, path=""):
            if hasattr(data, 'predict'):
                models_found.append((path, type(data).__name__))
                return
            
            if isinstance(data, dict):
                for key, value in data.items():
                    find_models(value, f"{path}.{key}" if path else key)
            elif isinstance(data, (list, tuple)):
                for i, item in enumerate(data):
                    find_models(item, f"{path}[{i}]")
        
        find_models(model_data)
        
        if models_found:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_found)}")
            for path, model_type in models_found:
                print(f"   ‚Ä¢ {path}: {model_type}")
        else:
            print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("=" * 20)
        
        if models_found:
            print("‚úÖ –ú–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
            print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
        else:
            print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
            print("   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏")
        
        print(f"\nüìÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_model_structure() 