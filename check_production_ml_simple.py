#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ML –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
"""

import requests
import json
import sys
from datetime import datetime

def check_production_ml_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ML –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê ML-–ú–û–î–ï–õ–ï–ô –í –ü–†–û–î–ê–ö–®–ù–ï")
    print("=" * 50)
    print(f"üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    PRODUCTION_URLS = [
        "http://localhost:8001",  # forecast-api
        "http://localhost:8002",  # ml-service
        "http://localhost:8000"   # moysklad-service
    ]
    
    working_services = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ò–°–û–í")
    print("-" * 40)
    
    for url in PRODUCTION_URLS:
        try:
            response = requests.get(f"{url}/health", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {url} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                working_services.append(url)
            else:
                print(f"‚ùå {url} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {url} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞: {e})")
    
    if not working_services:
        print("\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ML-—Å–µ—Ä–≤–∏—Å–æ–≤!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ó–∞–ø—É—â–µ–Ω—ã –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker ps")
        print("   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ –ø–æ—Ä—Ç—ã: docker-compose ps")
        print("   3. –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose logs")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π
    print(f"\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ú–û–î–ï–õ–ï–ô")
    print("-" * 40)
    
    models_status = None
    for url in working_services:
        try:
            response = requests.get(f"{url}/models/status", timeout=5)
            if response.status_code == 200:
                models_status = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω —Å {url}")
                break
        except:
            continue
    
    if models_status:
        print(f"üìä –°–¢–ê–¢–£–° –ú–û–î–ï–õ–ï–ô:")
        print(f"   –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {models_status.get('total_models', 0)}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {models_status.get('average_accuracy', 0):.2%}")
        
        models_by_type = models_status.get('models_by_type', {})
        if models_by_type:
            print(f"   –ú–æ–¥–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º:")
            for model_type, count in models_by_type.items():
                print(f"     {model_type}: {count} –º–æ–¥–µ–ª–µ–π")
    else:
        print("‚ùå –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–µ–Ω")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    print(f"\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –ú–û–î–ï–õ–ï–ô")
    print("-" * 40)
    
    models_loaded = 0
    for url in working_services:
        try:
            response = requests.get(f"{url}/health", timeout=5)
            if response.status_code == 200:
                health_data = response.json()
                if 'models_loaded' in health_data:
                    models_loaded = health_data['models_loaded']
                    print(f"‚úÖ {url}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {models_loaded}")
                    break
        except:
            continue
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 40)
    
    test_products = ["30001", "60800", "360360"]
    forecast_working = False
    
    for url in working_services:
        for product_code in test_products:
            try:
                forecast_data = {
                    "product_code": product_code,
                    "forecast_days": 30
                }
                
                response = requests.post(
                    f"{url}/forecast",
                    json=forecast_data,
                    timeout=10
                )
                
                if response.status_code == 200:
                    forecast_result = response.json()
                    print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {url}")
                    print(f"   –ü—Ä–æ–¥—É–∫—Ç {product_code}:")
                    print(f"     –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {forecast_result.get('forecast_consumption', 'N/A')}")
                    print(f"     –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑: {forecast_result.get('recommended_order', 'N/A')}")
                    print(f"     –î–Ω–µ–π –¥–æ OoS: {forecast_result.get('days_until_oos', 'N/A')}")
                    forecast_working = True
                    break
                    
            except Exception as e:
                continue
        
        if forecast_working:
            break
    
    if not forecast_working:
        print("‚ùå –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # 5. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\n5Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")
    print("-" * 40)
    
    if models_loaded > 0 or (models_status and models_status.get('total_models', 0) > 0):
        print("‚úÖ ML-–ú–û–î–ï–õ–ò –û–ë–£–ß–ï–ù–´ –ò –ì–û–¢–û–í–´ –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        print(f"   ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {models_loaded}")
        if models_status:
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {models_status.get('total_models', 0)}")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {models_status.get('average_accuracy', 0):.2%}")
        
        if forecast_working:
            print("   ‚Ä¢ API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚Ä¢ ‚ö†Ô∏è API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
    elif working_services:
        print("‚ö†Ô∏è ML-–°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢, –ù–û –ú–û–î–ï–õ–ò –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–´")
        print("   ‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏")
        print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker exec forecast-api python3 train_models_in_container.py")
        
    else:
        print("‚ùå ML-–°–ï–†–í–ò–°–´ –ù–ï –†–ê–ë–û–¢–ê–Æ–¢")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
        print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: ./start_system_optimized.sh")
    
    # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\n6Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("-" * 40)
    
    if models_loaded == 0:
        print("üöÄ –î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print("      docker exec forecast-api ls -la /app/data/")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ:")
        print("      docker exec forecast-api python3 train_models_in_container.py")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è:")
        print("      docker-compose logs forecast-api")
    
    print("üîß –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print("   1. –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: docker ps")
    print("   2. –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose logs")
    print("   3. –§–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: docker exec forecast-api ls -la /app/data/")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "working_services": working_services,
        "models_loaded": models_loaded,
        "models_status": models_status,
        "forecast_working": forecast_working,
        "summary": {
            "ml_ready": models_loaded > 0 or (models_status and models_status.get('total_models', 0) > 0),
            "services_working": len(working_services) > 0
        }
    }
    
    with open('production_ml_status.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: production_ml_status.json")
    
    return True

if __name__ == "__main__":
    try:
        check_production_ml_status()
    except KeyboardInterrupt:
        print("\n\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        sys.exit(1)
