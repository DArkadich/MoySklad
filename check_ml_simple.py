#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ML-–º–æ–¥–µ–ª–µ–π –±–µ–∑ aiohttp
"""

import requests
import json
import os
from datetime import datetime
from typing import Dict, Any

def check_ml_service_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è ML-—Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get("http://localhost:8002/health", timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            print("‚úÖ ML-—Å–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤")
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {health_data.get('models_loaded', 0)}")
            return True
        else:
            print(f"‚ùå ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ML-—Å–µ—Ä–≤–∏—Å—É: {e}")
        return False

def get_models_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        response = requests.get("http://localhost:8002/models/status", timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return None

def get_model_performance(product_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        url = f"http://localhost:8002/models/{product_id}/performance"
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {product_id}: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return None

def test_forecast(product_id: str = "30001"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        forecast_request = {
            "product_id": product_id,
            "forecast_days": 30,
            "model_type": None
        }
        
        response = requests.post(
            "http://localhost:8002/forecast", 
            json=forecast_request, 
            timeout=10
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {product_id}: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return None

def check_models_directory():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    models_dir = "/app/data/models"
    if not os.path.exists(models_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {models_dir}")
        return []
    
    model_files = []
    for filename in os.listdir(models_dir):
        if filename.endswith('.pkl') or filename.endswith('.joblib'):
            model_files.append(filename)
    
    return model_files

def check_docker_containers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    try:
        import subprocess
        result = subprocess.run(['docker', 'ps'], capture_output=True, text=True)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            ml_service_found = any('ml-service' in line for line in lines)
            if ml_service_found:
                print("‚úÖ ML-—Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –≤ Docker")
                return True
            else:
                print("‚ùå ML-—Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö")
                return False
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    print("üîç –£–ü–†–û–©–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ML-–ú–û–î–ï–õ–ï–ô")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    docker_ok = check_docker_containers()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è ML-—Å–µ—Ä–≤–∏—Å–∞...")
    service_healthy = check_ml_service_health()
    
    if not service_healthy:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: ./start_system.sh")
        print("   2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ ML-—Å–µ—Ä–≤–∏—Å: docker-compose up ml-service")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs ml-service")
        return
    
    # 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π
    print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π...")
    models_status = get_models_status()
    
    if models_status:
        print("üìä –°–¢–ê–¢–£–° –ú–û–î–ï–õ–ï–ô:")
        print(f"   –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {models_status.get('total_models', 0)}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {models_status.get('average_accuracy', 0):.2%}")
        
        models_by_type = models_status.get('models_by_type', {})
        if models_by_type:
            print("   –ú–æ–¥–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º:")
            for model_type, count in models_by_type.items():
                print(f"     {model_type}: {count} –º–æ–¥–µ–ª–µ–π")
        else:
            print("   ‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π...")
    model_files = check_models_directory()
    
    if model_files:
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π: {len(model_files)}")
        for filename in model_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   {filename}")
        if len(model_files) > 5:
            print(f"   ... –∏ –µ—â–µ {len(model_files) - 5} —Ñ–∞–π–ª–æ–≤")
    else:
        print("‚ùå –§–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    test_products = ["30001", "30002", "60001", "360360"]
    
    for product_id in test_products:
        print(f"\n   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        performance = get_model_performance(product_id)
        if performance:
            print(f"     –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
            for perf in performance:
                print(f"       {perf['model_type']}: —Ç–æ—á–Ω–æ—Å—Ç—å {perf['accuracy']:.2%}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        forecast = test_forecast(product_id)
        if forecast:
            print(f"     –ü—Ä–æ–≥–Ω–æ–∑:")
            print(f"       –î–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å: {forecast.get('daily_demand', 0):.2f}")
            print(f"       –¢–æ—á–Ω–æ—Å—Ç—å: {forecast.get('accuracy', 0):.2%}")
            print(f"       –ú–æ–¥–µ–ª—å: {forecast.get('model_type', 'unknown')}")
        else:
            print(f"     ‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    results = {
        "timestamp": datetime.now().isoformat(),
        "docker_ok": docker_ok,
        "service_healthy": service_healthy,
        "models_status": models_status,
        "model_files": model_files,
        "test_results": {}
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    for product_id in test_products:
        performance = get_model_performance(product_id)
        forecast = test_forecast(product_id)
        
        results["test_results"][product_id] = {
            "performance": performance,
            "forecast": forecast
        }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open('ml_models_status_simple.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ml_models_status_simple.json")
    
    # 7. –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
    
    if service_healthy and models_status and models_status.get('total_models', 0) > 0:
        print("‚úÖ ML-–º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {models_status.get('total_models', 0)}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {models_status.get('average_accuracy', 0):.2%}")
    elif service_healthy:
        print("‚ö†Ô∏è ML-—Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏")
    else:
        print("‚ùå ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    main() 