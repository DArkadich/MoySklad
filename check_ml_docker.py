#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ ML-–º–æ–¥–µ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""

import subprocess
import json
import requests
from datetime import datetime
from typing import Dict, Any

def run_docker_command(command: list) -> tuple:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
    try:
        result = subprocess.run(command, capture_output=True, text=True, timeout=30)
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return False, "", "Timeout expired"
    except Exception as e:
        return False, "", str(e)

def check_docker_containers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    success, output, error = run_docker_command(['docker', 'ps'])
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {error}")
        return False
    
    # –ò—â–µ–º ML-—Å–µ—Ä–≤–∏—Å
    ml_service_running = 'ml-service' in output
    if ml_service_running:
        print("‚úÖ ML-—Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –≤ Docker")
        return True
    else:
        print("‚ùå ML-—Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö")
        print("   –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:")
        for line in output.strip().split('\n')[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if line.strip():
                print(f"     {line}")
        return False

def check_ml_service_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è ML-—Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ Docker"""
    print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è ML-—Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ curl –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    success, output, error = run_docker_command([
        'docker', 'exec', 'ml-service', 'curl', '-s', 'http://localhost:8002/health'
    ])
    
    if success and output:
        try:
            health_data = json.loads(output)
            print("‚úÖ ML-—Å–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤")
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {health_data.get('models_loaded', 0)}")
            return True, health_data
        except json.JSONDecodeError:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: {output}")
            return False, None
    else:
        print(f"‚ùå ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {error}")
        return False, None

def get_models_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ Docker"""
    print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π...")
    
    success, output, error = run_docker_command([
        'docker', 'exec', 'ml-service', 'curl', '-s', 'http://localhost:8002/models/status'
    ])
    
    if success and output:
        try:
            return json.loads(output)
        except json.JSONDecodeError:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {output}")
            return None
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {error}")
        return None

def check_models_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...")
    
    success, output, error = run_docker_command([
        'docker', 'exec', 'ml-service', 'ls', '-la', '/app/data/models/'
    ])
    
    if success:
        print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–∞")
        lines = output.strip().split('\n')
        model_files = [line for line in lines if line.endswith(('.pkl', '.joblib'))]
        
        if model_files:
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π: {len(model_files)}")
            for file_info in model_files[:5]:
                print(f"     {file_info}")
            if len(model_files) > 5:
                print(f"     ... –∏ –µ—â–µ {len(model_files) - 5} —Ñ–∞–π–ª–æ–≤")
            return model_files
        else:
            print("   ‚ö†Ô∏è –§–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤: {error}")
        return []

def test_forecast_in_container(product_id: str = "30001"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {product_id}...")
    
    forecast_request = {
        "product_id": product_id,
        "forecast_days": 30,
        "model_type": None
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ curl –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    success, output, error = run_docker_command([
        'docker', 'exec', 'ml-service', 'curl', '-s', '-X', 'POST',
        'http://localhost:8002/forecast',
        '-H', 'Content-Type: application/json',
        '-d', json.dumps(forecast_request)
    ])
    
    if success and output:
        try:
            forecast_data = json.loads(output)
            print("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω")
            print(f"   –î–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å: {forecast_data.get('daily_demand', 0):.2f}")
            print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {forecast_data.get('accuracy', 0):.2%}")
            print(f"   –ú–æ–¥–µ–ª—å: {forecast_data.get('model_type', 'unknown')}")
            return forecast_data
        except json.JSONDecodeError:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: {output}")
            return None
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {error}")
        return None

def check_ml_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ ML-—Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ ML-—Å–µ—Ä–≤–∏—Å–∞...")
    
    success, output, error = run_docker_command([
        'docker', 'logs', '--tail', '20', 'ml-service'
    ])
    
    if success:
        print("üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:")
        for line in output.strip().split('\n'):
            if line.strip():
                print(f"   {line}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
        error_lines = [line for line in output.split('\n') if 'error' in line.lower() or 'exception' in line.lower()]
        if error_lines:
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(error_lines)} —Å—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏:")
            for line in error_lines[:5]:
                print(f"   {line}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {error}")

def check_container_resources():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
    
    success, output, error = run_docker_command([
        'docker', 'stats', 'ml-service', '--no-stream', '--format', 'table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}'
    ])
    
    if success:
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:")
        for line in output.strip().split('\n'):
            if line.strip():
                print(f"   {line}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    print("üê≥ –ü–†–û–í–ï–†–ö–ê ML-–ú–û–î–ï–õ–ï–ô –í DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–ï")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    containers_ok = check_docker_containers()
    
    if not containers_ok:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: ./start_system.sh")
        print("   2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ ML-—Å–µ—Ä–≤–∏—Å: docker-compose up -d ml-service")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ docker-compose.yml")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
    service_healthy, health_data = check_ml_service_health()
    
    if not service_healthy:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ ML-—Å–µ—Ä–≤–∏—Å: docker restart ml-service")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs ml-service")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç—ã: docker port ml-service")
        return
    
    # 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π
    models_status = get_models_status()
    
    if models_status:
        print("\nüìä –°–¢–ê–¢–£–° –ú–û–î–ï–õ–ï–ô:")
        print(f"   –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {models_status.get('total_models', 0)}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {models_status.get('average_accuracy', 0):.2%}")
        
        models_by_type = models_status.get('models_by_type', {})
        if models_by_type:
            print("   –ú–æ–¥–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º:")
            for model_type, count in models_by_type.items():
                print(f"     {model_type}: {count} –º–æ–¥–µ–ª–µ–π")
        else:
            print("   ‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π
    model_files = check_models_files()
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    check_container_resources()
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    check_ml_logs()
    
    # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
    test_products = ["30001", "30002", "60001", "360360"]
    
    for product_id in test_products:
        forecast = test_forecast_in_container(product_id)
        if not forecast:
            print(f"   ‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {product_id}")
    
    # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    results = {
        "timestamp": datetime.now().isoformat(),
        "containers_ok": containers_ok,
        "service_healthy": service_healthy,
        "health_data": health_data,
        "models_status": models_status,
        "model_files": model_files,
        "test_results": {}
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    for product_id in test_products:
        forecast = test_forecast_in_container(product_id)
        results["test_results"][product_id] = forecast
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open('ml_models_docker_status.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ml_models_docker_status.json")
    
    # 9. –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
    
    if service_healthy and models_status and models_status.get('total_models', 0) > 0:
        print("‚úÖ ML-–º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {models_status.get('total_models', 0)}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {models_status.get('average_accuracy', 0):.2%}")
    elif service_healthy:
        print("‚ö†Ô∏è ML-—Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏")
    else:
        print("‚ùå ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    main() 