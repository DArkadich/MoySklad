#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import httpx
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE_URL = "http://localhost:8001"

async def test_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è API...")
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            resp = await client.get(f"{API_BASE_URL}/health")
            
            if resp.status_code == 200:
                data = resp.json()
                print(f"‚úÖ API –∑–¥–æ—Ä–æ–≤: {data}")
                return True
            else:
                print(f"‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {resp.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

async def test_models_status():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ ML –º–æ–¥–µ–ª–µ–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ML –º–æ–¥–µ–ª–µ–π...")
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            resp = await client.get(f"{API_BASE_URL}/models/status")
            
            if resp.status_code == 200:
                data = resp.json()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π: {data}")
                return data.get('total_models', 0) > 0
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {resp.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_forecast(product_code: str = "12345"):
    """–¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_code}...")
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            request_data = {
                "product_code": product_code,
                "forecast_days": 30
            }
            
            resp = await client.post(f"{API_BASE_URL}/forecast", json=request_data)
            
            if resp.status_code == 200:
                data = resp.json()
                print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω:")
                print(f"   –¢–æ–≤–∞—Ä: {data['product_code']}")
                print(f"   –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: {data['current_stock']}")
                print(f"   –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {data['forecast_consumption']:.2f} –µ–¥/–¥–µ–Ω—å")
                print(f"   –î–Ω–µ–π –¥–æ OoS: {data['days_until_oos']}")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑: {data['recommended_order']:.0f}")
                print(f"   –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–∫–∞–∑: {data['final_order']}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['confidence']:.2f}")
                print(f"   –¢–∏–ø –º–æ–¥–µ–ª–∏: {data['model_type']}")
                print(f"   –ú–æ–¥–µ–ª–∏: {data['models_used']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {resp.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {resp.text}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_multiple_products():
    """–¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
    
    test_products = ["12345", "67890", "11111", "22222", "33333"]
    results = []
    
    for product_code in test_products:
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                request_data = {
                    "product_code": product_code,
                    "forecast_days": 30
                }
                
                resp = await client.post(f"{API_BASE_URL}/forecast", json=request_data)
                
                if resp.status_code == 200:
                    data = resp.json()
                    results.append({
                        'product_code': product_code,
                        'current_stock': data['current_stock'],
                        'forecast_consumption': data['forecast_consumption'],
                        'days_until_oos': data['days_until_oos'],
                        'confidence': data['confidence'],
                        'model_type': data['model_type']
                    })
                    print(f"‚úÖ {product_code}: {data['model_type']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['confidence']:.2f})")
                else:
                    print(f"‚ùå {product_code}: –æ—à–∏–±–∫–∞ {resp.status_code}")
                    
        except Exception as e:
            print(f"‚ùå {product_code}: {e}")
    
    return results

async def test_api_root():
    """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            resp = await client.get(f"{API_BASE_URL}/")
            
            if resp.status_code == 200:
                data = resp.json()
                print(f"‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: {data}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: {resp.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML API...")
    print(f"üì° API URL: {API_BASE_URL}")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç—ã
    tests = [
        ("–ó–¥–æ—Ä–æ–≤—å–µ API", test_health),
        ("–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç", test_api_root),
        ("–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π", test_models_status),
        ("–ü—Ä–æ–≥–Ω–æ–∑ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞", lambda: test_forecast("12345")),
        ("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤", test_multiple_products)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"üß™ {test_name}")
        print('='*50)
        
        try:
            result = await test_func()
            results[test_name] = result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print('='*50)
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(main()) 