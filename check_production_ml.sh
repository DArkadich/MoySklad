#!/bin/bash

echo "üîç –ü–†–û–í–ï–†–ö–ê ML-–ú–û–î–ï–õ–ï–ô –í –ü–†–û–î–ê–ö–®–ù–ï"
echo "===================================="
echo "üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: $(date)"
echo ""

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ö–û–ù–¢–ï–ô–ù–ï–†–û–í"
echo "--------------------------------"

if command -v docker &> /dev/null; then
    echo "‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    ML_CONTAINERS=$(docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(ml-service|forecast-api|moysklad-service)")
    
    if [ ! -z "$ML_CONTAINERS" ]; then
        echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã ML-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        echo "$ML_CONTAINERS"
    else
        echo "‚ùå ML-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo "   –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        echo "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"
        echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: ./start_system_optimized.sh"
        echo "   2. –ò–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./restart_system_fixed.sh"
        exit 1
    fi
else
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    exit 1
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è ML-—Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø ML-–°–ï–†–í–ò–°–û–í"
echo "--------------------------------"

HEALTH_ENDPOINTS=(
    "http://localhost:8001/health"
    "http://localhost:8002/health"
    "http://localhost:8000/health"
)

WORKING_SERVICES=()
for endpoint in "${HEALTH_ENDPOINTS[@]}"; do
    echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ $endpoint..."
    if curl -s --max-time 5 "$endpoint" > /dev/null; then
        echo "   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
        WORKING_SERVICES+=("$endpoint")
    else
        echo "   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
done

if [ ${#WORKING_SERVICES[@]} -eq 0 ]; then
    echo "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ML-—Å–µ—Ä–≤–∏—Å–æ–≤!"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs"
    exit 1
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π
echo ""
echo "3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ú–û–î–ï–õ–ï–ô"
echo "----------------------------"

MODELS_STATUS=""
for service in "${WORKING_SERVICES[@]}"; do
    base_url=$(echo "$service" | sed 's|/health||')
    echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π –Ω–∞ $base_url..."
    
    if curl -s --max-time 5 "$base_url/models/status" > /dev/null; then
        MODELS_STATUS=$(curl -s --max-time 5 "$base_url/models/status")
        echo "   ‚úÖ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω"
        break
    else
        echo "   ‚ùå –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
done

if [ ! -z "$MODELS_STATUS" ]; then
    echo "üìä –°–¢–ê–¢–£–° –ú–û–î–ï–õ–ï–ô:"
    echo "$MODELS_STATUS" | jq . 2>/dev/null || echo "$MODELS_STATUS"
else
    echo "‚ùå –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–µ–Ω"
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
echo ""
echo "4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –ú–û–î–ï–õ–ï–ô"
echo "--------------------------------"

MODELS_LOADED=0
for service in "${WORKING_SERVICES[@]}"; do
    base_url=$(echo "$service" | sed 's|/health||')
    echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ health –Ω–∞ $base_url..."
    
    HEALTH_RESPONSE=$(curl -s --max-time 5 "$service")
    if [ ! -z "$HEALTH_RESPONSE" ]; then
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        MODELS_COUNT=$(echo "$HEALTH_RESPONSE" | grep -o '"models_loaded":[0-9]*' | cut -d':' -f2)
        if [ ! -z "$MODELS_COUNT" ]; then
            MODELS_LOADED=$MODELS_COUNT
            echo "   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: $MODELS_LOADED"
            break
        fi
    fi
done

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
echo ""
echo "5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ú–û–î–ï–õ–ï–ô –í –ö–û–ù–¢–ï–ô–ù–ï–†–ï"
echo "----------------------------------------"

# –ù–∞–π–¥–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å ML-—Å–µ—Ä–≤–∏—Å–æ–º
ML_CONTAINER=$(docker ps --format "{{.Names}}" | grep -E "(ml-service|forecast-api|moysklad-service)" | head -1)

if [ ! -z "$ML_CONTAINER" ]; then
    echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: $ML_CONTAINER"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    if docker exec "$ML_CONTAINER" ls -la /app/data/ > /dev/null 2>&1; then
        echo "   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /app/data/ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π
        MODEL_FILES=$(docker exec "$ML_CONTAINER" find /app/data/ -name "*.pkl" -o -name "*.joblib" 2>/dev/null | wc -l)
        if [ $MODEL_FILES -gt 0 ]; then
            echo "   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π: $MODEL_FILES"
            echo "   –§–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π:"
            docker exec "$ML_CONTAINER" find /app/data/ -name "*.pkl" -o -name "*.joblib" 2>/dev/null | head -5
        else
            echo "   ‚ùå –§–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CSV —Ñ–∞–π–ª–æ–≤
        CSV_FILES=$(docker exec "$ML_CONTAINER" find /app/data/ -name "*.csv" 2>/dev/null | wc -l)
        if [ $CSV_FILES -gt 0 ]; then
            echo "   ‚úÖ –ù–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤: $CSV_FILES"
        fi
    else
        echo "   ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /app/data/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
else
    echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ML-—Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
echo ""
echo "6Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø"
echo "-----------------------------------"

FORECAST_WORKING=false
TEST_PRODUCTS=("30001" "60800" "360360")

for service in "${WORKING_SERVICES[@]}"; do
    base_url=$(echo "$service" | sed 's|/health||')
    
    for product_code in "${TEST_PRODUCTS[@]}"; do
        echo "   –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ $product_code –Ω–∞ $base_url..."
        
        FORECAST_RESPONSE=$(curl -s --max-time 10 -X POST "$base_url/forecast" \
            -H "Content-Type: application/json" \
            -d "{\"product_code\":\"$product_code\",\"forecast_days\":30}" 2>/dev/null)
        
        if [ $? -eq 0 ] && [ ! -z "$FORECAST_RESPONSE" ]; then
            echo "   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ $product_code"
            echo "   –û—Ç–≤–µ—Ç: $FORECAST_RESPONSE" | head -c 200
            echo "..."
            FORECAST_WORKING=true
            break 2
        else
            echo "   ‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    done
done

# 7. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
echo ""
echo "7Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê"
echo "-------------------"

if [ $MODELS_LOADED -gt 0 ]; then
    echo "‚úÖ ML-–ú–û–î–ï–õ–ò –û–ë–£–ß–ï–ù–´ –ò –ì–û–¢–û–í–´ –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ"
    echo "   ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: $MODELS_LOADED"
    
    if [ "$FORECAST_WORKING" = true ]; then
        echo "   ‚Ä¢ API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        echo "   ‚Ä¢ ‚ö†Ô∏è API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    fi
    
elif [ ${#WORKING_SERVICES[@]} -gt 0 ]; then
    echo "‚ö†Ô∏è ML-–°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢, –ù–û –ú–û–î–ï–õ–ò –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–´"
    echo "   ‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏"
    echo "   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker exec forecast-api python3 train_models_in_container.py"
    
else
    echo "‚ùå ML-–°–ï–†–í–ò–°–´ –ù–ï –†–ê–ë–û–¢–ê–Æ–¢"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: ./start_system_optimized.sh"
fi

# 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
echo ""
echo "8Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"
echo "---------------"

if [ $MODELS_LOADED -eq 0 ]; then
    echo "üöÄ –î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:"
    echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:"
    echo "      docker exec forecast-api ls -la /app/data/"
    echo "   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ:"
    echo "      docker exec forecast-api python3 train_models_in_container.py"
    echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è:"
    echo "      docker-compose logs forecast-api"
fi

echo "üîß –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
echo "   1. –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: docker ps"
echo "   2. –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose logs"
echo "   3. –§–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: docker exec forecast-api ls -la /app/data/"

echo ""
echo "üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $(date)"
