#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API MoySklad
"""

import asyncio
import httpx
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import json
import logging
import time
import random
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
import pickle
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RateLimitedMoySkladCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MoySklad API —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    
    def __init__(self):
        self.api_token = os.getenv('MOYSKLAD_API_TOKEN')
        self.api_url = os.getenv('MOYSKLAD_API_URL', 'https://api.moysklad.ru/api/remap/1.2')
        
        if not self.api_token:
            raise ValueError("MOYSKLAD_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "application/json"
        }
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API
        self.requests_per_minute = 30  # –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        self.delay_between_requests = 2.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_request_time = 0
        
    async def _rate_limit(self):
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        
        if time_since_last < self.delay_between_requests:
            sleep_time = self.delay_between_requests - time_since_last
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.1f} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API...")
            await asyncio.sleep(sleep_time)
        
        self.last_request_time = time.time()
    
    async def _make_request(self, method: str, url: str, **kwargs) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
        await self._rate_limit()
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.request(method, url, headers=self.headers, **kwargs)
                
                if response.status_code == 200:
                    return response.json()
                elif response.status_code == 429:  # Too Many Requests
                    logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(60)
                    return None
                elif response.status_code == 403:  # Forbidden
                    logger.error("‚ùå API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")
                    return None
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    async def get_all_products(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ MoySklad —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
        logger.info("üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ MoySklad...")
        
        data = await self._make_request("GET", f"{self.api_url}/entity/product")
        
        if data:
            products = data.get("rows", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ MoySklad")
            return products
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ MoySklad")
            return []
    
    async def get_sales_data(self, product_id: str, days_back: int = 90) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Ç–æ–≤–∞—Ä–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}...")

        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_back)

        # –§–æ—Ä–º–∞—Ç –¥–∞—Ç –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
        moment_from = start_date.replace(microsecond=0).strftime('%Y-%m-%dT00:00:00')
        moment_to = end_date.replace(microsecond=0).strftime('%Y-%m-%dT23:59:59')

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–¥–∞–∂ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º momentFrom/momentTo)
        data = await self._make_request(
            "GET",
            f"{self.api_url}/entity/demand",
            params={
                "momentFrom": moment_from,
                "momentTo": moment_to,
                "limit": 100  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç
            }
        )
        
        if not data:
            return []
        
        sales_data = []
        
        for demand in data.get("rows", []):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            positions_data = await self._make_request(
                "GET",
                f"{self.api_url}/entity/demand/{demand['id']}/positions",
                params={"expand": "assortment"}
            )
            
            if positions_data:
                for position in positions_data.get("rows", []):
                    assortment = position.get("assortment", {})
                    assortment_id = None

                    if isinstance(assortment, dict):
                        # –ü—Ä—è–º–æ–π id, –µ—Å–ª–∏ expand —Å—Ä–∞–±–æ—Ç–∞–ª
                        assortment_id = assortment.get("id")
                        if not assortment_id:
                            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ meta.href
                            href = (assortment.get("meta", {}) or {}).get("href", "")
                            if href:
                                assortment_id = href.rstrip("/").split("/")[-1]

                    if assortment_id == product_id:
                        sales_data.append({
                            "date": demand.get("moment"),
                            "quantity": position.get("quantity", 0),
                            "price": (position.get("price", 0) or 0) / 100,
                            "sum": (position.get("sum", 0) or 0) / 100
                        })
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(sales_data)} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
        return sales_data
    
    async def get_stock_data(self, product_id: str, days_back: int = 30) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
        logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}...")
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_back)
        
        data = await self._make_request(
            "GET", 
            f"{self.api_url}/report/stock/all",
            params={
                "filter": f"assortmentId={product_id}",
                "momentFrom": start_date.isoformat(),
                "momentTo": end_date.isoformat()
            }
        )
        
        if not data:
            return []
        
        stock_data = []
        for row in data.get("rows", []):
            stock_data.append({
                "date": row.get("moment", datetime.now().isoformat()),
                "quantity": row.get("quantity", 0),
                "reserve": row.get("reserve", 0),
                "inTransit": row.get("inTransit", 0)
            })
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(stock_data)} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
        return stock_data

class MLModelTrainer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.models_dir = "data/real_models"
        os.makedirs(self.models_dir, exist_ok=True)
    
    def prepare_features(self, sales_data: List[Dict], stock_data: List[Dict]) -> pd.DataFrame:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        if not sales_data:
            return pd.DataFrame()
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        df = pd.DataFrame(sales_data)
        df['date'] = pd.to_datetime(df['date'])
        df = df.set_index('date').sort_index()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_sales = df.groupby(df.index.date).agg({
            'quantity': 'sum',
            'price': 'mean',
            'sum': 'sum'
        }).reset_index()
        daily_sales['date'] = pd.to_datetime(daily_sales['date'])
        daily_sales = daily_sales.set_index('date')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        daily_sales['year'] = daily_sales.index.year
        daily_sales['month'] = daily_sales.index.month
        daily_sales['day'] = daily_sales.index.day
        daily_sales['day_of_year'] = daily_sales.index.dayofyear
        daily_sales['day_of_week'] = daily_sales.index.dayofweek
        daily_sales['is_month_start'] = daily_sales.index.day == 1
        daily_sales['is_quarter_start'] = (daily_sales.index.day == 1) & (daily_sales.index.month.isin([1, 4, 7, 10]))
        daily_sales['is_weekend'] = daily_sales.index.dayofweek >= 5
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        daily_sales['is_holiday_season'] = daily_sales.index.month.isin([12, 1, 2])
        daily_sales['is_summer_season'] = daily_sales.index.month.isin([6, 7, 8])
        
        # –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        daily_sales['quantity_lag_1'] = daily_sales['quantity'].shift(1)
        daily_sales['quantity_lag_7'] = daily_sales['quantity'].shift(7)
        daily_sales['quantity_lag_30'] = daily_sales['quantity'].shift(30)
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        daily_sales['quantity_ma_7'] = daily_sales['quantity'].rolling(7).mean()
        daily_sales['quantity_ma_30'] = daily_sales['quantity'].rolling(30).mean()
        
        # –£–¥–∞–ª—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
        daily_sales = daily_sales.dropna()
        
        return daily_sales
    
    def train_models(self, product_id: str, features_df: pd.DataFrame) -> Dict:
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        if len(features_df) < 20:  # –£–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {len(features_df)} –∑–∞–ø–∏—Å–µ–π")
            return {}
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        feature_columns = [col for col in features_df.columns if col not in ['quantity', 'price', 'sum']]
        X = features_df[feature_columns].values
        y = features_df['quantity'].values
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
        split_idx = int(len(X) * 0.8)
        X_train, X_test = X[:split_idx], X[split_idx:]
        y_train, y_test = y[:split_idx], y[split_idx:]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        models = {}
        
        # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        lr_model = LinearRegression()
        lr_model.fit(X_train_scaled, y_train)
        lr_score = lr_model.score(X_test_scaled, y_test)
        models['linear_regression'] = {
            'model': lr_model,
            'scaler': scaler,
            'accuracy': lr_score,
            'feature_columns': feature_columns
        }
        
        # –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
        rf_model = RandomForestRegressor(n_estimators=50, random_state=42)  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤
        rf_model.fit(X_train_scaled, y_train)
        rf_score = rf_model.score(X_test_scaled, y_test)
        models['random_forest'] = {
            'model': rf_model,
            'scaler': scaler,
            'accuracy': rf_score,
            'feature_columns': feature_columns
        }
        
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id} –æ–±—É—á–µ–Ω—ã:")
        logger.info(f"  Linear Regression: {lr_score:.4f}")
        logger.info(f"  Random Forest: {rf_score:.4f}")
        
        return models
    
    def save_models(self, product_id: str, models: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        model_data = {
            'product_id': product_id,
            'models': {},
            'results': {},
            'features': [],
            'training_date': datetime.now().isoformat(),
            'model_type': 'real_data'
        }
        
        for model_name, model_info in models.items():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            model_path = os.path.join(self.models_dir, f"{product_id}_{model_name}.pkl")
            with open(model_path, 'wb') as f:
                pickle.dump(model_info['model'], f)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º scaler
            scaler_path = os.path.join(self.models_dir, f"{product_id}_{model_name}_scaler.pkl")
            with open(scaler_path, 'wb') as f:
                pickle.dump(model_info['scaler'], f)
            
            model_data['models'][model_name] = model_path
            model_data['results'][model_name] = {
                'accuracy': model_info['accuracy'],
                'feature_columns': model_info['feature_columns']
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_path = os.path.join(self.models_dir, f"{product_id}_metadata.json")
        with open(metadata_path, 'w') as f:
            json.dump(model_data, f, indent=2)
        
        logger.info(f"üíæ –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.models_dir}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API MoySklad")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    data_collector = RateLimitedMoySkladCollector()
    model_trainer = MLModelTrainer()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    products = await data_collector.get_all_products()
    
    if not products:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ MoySklad")
        logger.info("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.info("   - API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤")
        logger.info("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω API")
        logger.info("   - –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_products = products[:3]  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 3 —Ç–æ–≤–∞—Ä–æ–≤
    
    successful_models = 0
    
    for i, product in enumerate(test_products, 1):
        product_id = product['id']
        product_name = product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
        product_code = product.get('code', '')
        
        logger.info(f"üì¶ [{i}/{len(test_products)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä: {product_name}")
        logger.info(f"   ID: {product_id}, –ö–æ–¥: {product_code}")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
            sales_data = await data_collector.get_sales_data(product_id, days_back=90)
            
            if not sales_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_name}")
                continue
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
            stock_data = await data_collector.get_stock_data(product_id, days_back=30)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            features_df = model_trainer.prepare_features(sales_data, stock_data)
            
            if features_df.empty:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_name}")
                continue
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            models = model_trainer.train_models(product_id, features_df)
            
            if models:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
                model_trainer.save_models(product_id, models)
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_name} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                successful_models += 1
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_name}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_name}: {e}")
            continue
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
        if i < len(test_products):
            logger.info("‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API...")
            await asyncio.sleep(5)
    
    logger.info(f"üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {successful_models}/{len(test_products)}")
    
    if successful_models > 0:
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏!")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API —Ç–æ–∫–µ–Ω –∏ –ª–∏–º–∏—Ç—ã.")

if __name__ == "__main__":
    asyncio.run(main()) 