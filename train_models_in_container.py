#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π –ø—Ä—è–º–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: docker exec -it forecast-api python3 train_models_in_container.py
"""

import os
import sys
import logging
import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
import joblib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ContainerModelTrainer:
    """–¢—Ä–µ–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
    
    def __init__(self):
        self.models_dir = "/app/data/models"
        try:
            os.makedirs(self.models_dir, exist_ok=True)
        except PermissionError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤, —Å–æ–∑–¥–∞–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
            self.models_dir = "/tmp/models"
            os.makedirs(self.models_dir, exist_ok=True)
            logger.info(f"üìÅ –ú–æ–¥–µ–ª–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.models_dir}")
        
    def create_test_data(self, data_dir):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–µ—Ç"""
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 4 –≥–æ–¥–∞
        dates = pd.date_range(start='2020-01-01', end='2024-01-01', freq='D')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤
        products = ['PROD001', 'PROD002', 'PROD003']
        
        stock_data = []
        sales_data = []
        
        for product in products:
            # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            base_stock = np.random.randint(50, 200)
            base_sales = np.random.randint(0, 10)
            
            for date in dates:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–Ω–¥
                seasonal_factor = 1 + 0.3 * np.sin(2 * np.pi * date.dayofyear / 365)
                trend_factor = 1 + 0.1 * (date - dates[0]).days / 365
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                stock = max(0, int(base_stock * seasonal_factor * trend_factor + np.random.normal(0, 10)))
                sales = max(0, int(base_sales * seasonal_factor * trend_factor + np.random.normal(0, 2)))
                
                stock_data.append({
                    'date': date,
                    'product_code': product,
                    'stock': stock,
                    'product_name': f'–¢–æ–≤–∞—Ä {product}'
                })
                
                sales_data.append({
                    'date': date,
                    'product_code': product,
                    'quantity': sales,
                    'product_name': f'–¢–æ–≤–∞—Ä {product}'
                })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        stock_df = pd.DataFrame(stock_data)
        sales_df = pd.DataFrame(sales_data)
        
        stock_file = os.path.join(data_dir, 'stock_history.csv')
        sales_file = os.path.join(data_dir, 'sales_history.csv')
        
        stock_df.to_csv(stock_file, index=False)
        sales_df.to_csv(sales_file, index=False)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(stock_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        return products
    
    def load_real_historical_data(self, data_dir):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        production_data_file = os.path.join(data_dir, 'production_stock_data.csv')
        
        if os.path.exists(production_data_file):
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                data = pd.read_csv(production_data_file)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                products = data['product_code'].unique() if 'product_code' in data.columns else []
                logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                
                return data, products
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                return None, []
        else:
            logger.warning("‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ")
            return None, []
    
    def prepare_features(self, stock_data, sales_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML"""
        logger.info("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        data = pd.merge(stock_data, sales_data, on=['date', 'product_code'], how='outer')
        data = data.fillna(0)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        data['year'] = data['date'].dt.year
        data['month'] = data['date'].dt.month
        data['day_of_week'] = data['date'].dt.dayofweek
        data['day_of_year'] = data['date'].dt.dayofyear
        
        # –õ–∞–≥–∏
        for lag in [1, 7, 30]:
            data[f'stock_lag_{lag}'] = data.groupby('product_code')['stock'].shift(lag)
            data[f'sales_lag_{lag}'] = data.groupby('product_code')['quantity'].shift(lag)
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        for window in [7, 30]:
            data[f'stock_ma_{window}'] = data.groupby('product_code')['stock'].rolling(window).mean().reset_index(0, drop=True)
            data[f'sales_ma_{window}'] = data.groupby('product_code')['quantity'].rolling(window).mean().reset_index(0, drop=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        data['stock_std_30'] = data.groupby('product_code')['stock'].rolling(30).std().reset_index(0, drop=True)
        data['sales_std_30'] = data.groupby('product_code')['quantity'].rolling(30).std().reset_index(0, drop=True)
        
        # –£–¥–∞–ª—è–µ–º NaN
        data = data.dropna()
        
        return data
    
    def prepare_features_from_real_data(self, real_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'date' in real_data.columns:
            real_data['date'] = pd.to_datetime(real_data['date'])
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if 'date' in real_data.columns:
            real_data['year'] = real_data['date'].dt.year
            real_data['month'] = real_data['date'].dt.month
            real_data['day_of_week'] = real_data['date'].dt.dayofweek
            real_data['day_of_year'] = real_data['date'].dt.dayofyear
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'quantity' not in real_data.columns:
            real_data['quantity'] = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if 'stock' not in real_data.columns:
            real_data['stock'] = 100  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä—É –∏ –¥–∞—Ç–µ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        if 'product_code' in real_data.columns:
            # –°–æ–∑–¥–∞–µ–º –ª–∞–≥–∏ –∏ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
            for lag in [1, 7, 30]:
                real_data[f'quantity_lag_{lag}'] = real_data.groupby('product_code')['quantity'].shift(lag)
                real_data[f'stock_lag_{lag}'] = real_data.groupby('product_code')['stock'].shift(lag)
            
            for window in [7, 30]:
                real_data[f'quantity_ma_{window}'] = real_data.groupby('product_code')['quantity'].rolling(window).mean().reset_index(0, drop=True)
                real_data[f'stock_ma_{window}'] = real_data.groupby('product_code')['stock'].rolling(window).mean().reset_index(0, drop=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            real_data['quantity_std_30'] = real_data.groupby('product_code')['quantity'].rolling(30).std().reset_index(0, drop=True)
            real_data['stock_std_30'] = real_data.groupby('product_code')['stock'].rolling(30).std().reset_index(0, drop=True)
        
        # –£–¥–∞–ª—è–µ–º NaN
        real_data = real_data.dropna()
        
        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(real_data)} –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
        return real_data
    
    def train_model_for_product(self, product_data, product_code):
        """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        logger.info(f"üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_code}...")
        
        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
        base_features = ['year', 'month', 'day_of_week', 'day_of_year']
        lag_features = []
        ma_features = []
        std_features = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        for lag in [1, 7, 30]:
            if f'stock_lag_{lag}' in product_data.columns:
                lag_features.append(f'stock_lag_{lag}')
            if f'quantity_lag_{lag}' in product_data.columns:
                lag_features.append(f'quantity_lag_{lag}')
        
        for window in [7, 30]:
            if f'stock_ma_{window}' in product_data.columns:
                ma_features.append(f'stock_ma_{window}')
            if f'quantity_ma_{window}' in product_data.columns:
                ma_features.append(f'quantity_ma_{window}')
        
        if 'stock_std_30' in product_data.columns:
            std_features.append('stock_std_30')
        if 'quantity_std_30' in product_data.columns:
            std_features.append('quantity_std_30')
        
        feature_columns = base_features + lag_features + ma_features + std_features
        
        X = product_data[feature_columns]
        y = product_data['quantity']  # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        model = RandomForestRegressor(n_estimators=200, random_state=42)
        model.fit(X, y)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        model_path = os.path.join(self.models_dir, f"{product_code}_model.joblib")
        joblib.dump(model, model_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–µ–π–ª–µ—Ä
        scaler = StandardScaler()
        scaler.fit(X)
        scaler_path = os.path.join(self.models_dir, f"{product_code}_scaler.joblib")
        joblib.dump(scaler, scaler_path)
        
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è {product_code} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return model_path
    
    def train_all_models(self):
        """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            data_dir = '/app/data'
            try:
                os.makedirs(data_dir, exist_ok=True)
            except PermissionError:
                data_dir = '/tmp/data'
                os.makedirs(data_dir, exist_ok=True)
                logger.info(f"üìÅ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {data_dir}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            real_data, real_products = self.load_real_historical_data(data_dir)
            
            if real_data is not None and len(real_products) > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                data = self.prepare_features_from_real_data(real_data)
                
                # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                trained_models = []
                for product_code in real_products[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 10 —Ç–æ–≤–∞—Ä–∞–º–∏
                    product_data = data[data['product_code'] == product_code]
                    if len(product_data) > 100:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                        model_path = self.train_model_for_product(product_data, product_code)
                        trained_models.append(model_path)
                
                logger.info(f"‚úÖ –û–±—É—á–µ–Ω–æ {len(trained_models)} –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return trained_models
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                logger.info("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                stock_file = os.path.join(data_dir, 'stock_history.csv')
                sales_file = os.path.join(data_dir, 'sales_history.csv')
                
                if not os.path.exists(stock_file):
                    products = self.create_test_data(data_dir)
                else:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                    stock_data = pd.read_csv(stock_file)
                    sales_data = pd.read_csv(sales_file)
                    products = stock_data['product_code'].unique()
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                stock_data = pd.read_csv(stock_file)
                sales_data = pd.read_csv(sales_file)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            stock_data['date'] = pd.to_datetime(stock_data['date'])
            sales_data['date'] = pd.to_datetime(sales_data['date'])
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            data = self.prepare_features(stock_data, sales_data)
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            trained_models = []
            for product_code in products:
                product_data = data[data['product_code'] == product_code]
                if len(product_data) > 100:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                    model_path = self.train_model_for_product(product_data, product_code)
                    trained_models.append(model_path)
            
            logger.info(f"‚úÖ –û–±—É—á–µ–Ω–æ {len(trained_models)} –º–æ–¥–µ–ª–µ–π")
            return trained_models
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...")
    
    try:
        trainer = ContainerModelTrainer()
        trained_models = trainer.train_all_models()
        
        logger.info("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìä –û–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(trained_models)}")
        logger.info("üîÑ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 