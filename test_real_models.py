#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import httpx
import json
from datetime import datetime

async def test_real_models():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ MoySklad
    async with httpx.AsyncClient() as client:
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω
        headers = {
            "Authorization": "Bearer YOUR_API_TOKEN",
            "Content-Type": "application/json"
        }
        
        response = await client.get(
            "https://api.moysklad.ru/api/remap/1.2/entity/product",
            headers=headers,
            timeout=30.0
        )
        
        if response.status_code == 200:
            products = response.json().get("rows", [])
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
            for product in products[:3]:
                product_id = product['id']
                product_name = product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
                product_code = product.get('code', '')
                
                print(f"\nüì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä: {product_name}")
                print(f"   ID: {product_id}")
                print(f"   –ö–æ–¥: {product_code}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                forecast_data = {
                    "product_code": product_id,
                    "forecast_days": 30,
                    "current_stock": 100.0
                }
                
                try:
                    forecast_response = await client.post(
                        "http://localhost:8001/forecast",
                        json=forecast_data,
                        timeout=30.0
                    )
                    
                    if forecast_response.status_code == 200:
                        forecast_result = forecast_response.json()
                        print(f"   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω:")
                        print(f"      –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {forecast_result.get('forecast_consumption', 0)}")
                        print(f"      –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑: {forecast_result.get('recommended_order', 0)}")
                        print(f"      –î–Ω–µ–π –¥–æ OoS: {forecast_result.get('days_until_oos', 0)}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_response.status_code}")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {response.status_code}")

if __name__ == "__main__":
    asyncio.run(test_real_models())
