#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
"""

import os
import shutil
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def copy_historical_data():
    """–ö–æ–ø–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    logger.info("üìä –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    source_dir = "services/moysklad-service/data"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(source_dir):
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    files_to_copy = [
        "production_stock_data.csv",
        "universal_forecast_models.pkl",
        "accurate_consumption_results.csv"
    ]
    
    copied_files = []
    
    for file_name in files_to_copy:
        source_path = os.path.join(source_dir, file_name)
        if os.path.exists(source_path):
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            dest_path = os.path.join("data", file_name)
            os.makedirs("data", exist_ok=True)
            
            try:
                shutil.copy2(source_path, dest_path)
                copied_files.append(file_name)
                logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {file_name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {file_name}: {e}")
        else:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    logger.info(f"üìä –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(copied_files)}")
    return len(copied_files) > 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        success = copy_historical_data()
        
        if success:
            logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            logger.info("üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 