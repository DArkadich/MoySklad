#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
"""

import asyncio
import json
from datetime import datetime
from services.moysklad_service.app.intelligent_order_optimizer import IntelligentOrderOptimizer

async def test_intelligent_optimizer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = [
        {'code': '30001', 'stock': 385, 'consumption': 1, 'diopter': -0.5},
        {'code': '30002', 'stock': 154, 'consumption': 1, 'diopter': -0.75},
        {'code': '30003', 'stock': 103, 'consumption': 1, 'diopter': -1.00},
        {'code': '30004', 'stock': 80, 'consumption': 1, 'diopter': -1.25},
        {'code': '30005', 'stock': 5, 'consumption': 1, 'diopter': -1.50},
    ]
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    historical_data = {
        '30001': [1.2, 1.1, 1.3, 1.0, 1.2, 1.4, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.4, 1.1],
        '30002': [0.8, 0.9, 1.0, 0.8, 0.9, 1.1, 0.8, 0.9, 1.0, 0.8, 0.9, 1.1, 0.8, 0.9],
        '30003': [1.0, 1.1, 1.0, 1.2, 1.0, 1.1, 1.0, 1.2, 1.0, 1.1, 1.0, 1.2, 1.0, 1.1],
        '30004': [0.7, 0.8, 0.7, 0.9, 0.7, 0.8, 0.7, 0.9, 0.7, 0.8, 0.7, 0.9, 0.7, 0.8],
        '30005': [0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6],
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        optimizer = IntelligentOrderOptimizer()
        
        print("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU: {len(test_data)}")
        print(f"  –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(historical_data)} —Ç–æ–≤–∞—Ä–æ–≤")
        print()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        result = await optimizer.analyze_intelligent_order(test_data, historical_data)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        print("=" * 60)
        
        if result['order_needed']:
            print(f"‚úÖ –ó–∞–∫–∞–∑ –ù–£–ñ–ï–ù")
            print(f"üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: {result['total_volume']} –µ–¥.")
            print(f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {result['order_date']}")
            print(f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {result['delivery_date']}")
            print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {result['utilization']:.1f}%")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_opt = result.get('delivery_optimization', {})
            if delivery_opt.get('can_combine'):
                print(f"üöö –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: ‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞")
                print(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è: {delivery_opt.get('savings_days', 0)} –¥–Ω–µ–π")
            else:
                print(f"üöö –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: ‚ùå –†–∞–∑–¥–µ–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞")
            
            print("\nüìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê:")
            for order in result['sku_orders']:
                print(f"  {order['product_code']} ({order['diopter']:+.2f}): {order['volume']} –µ–¥.")
                print(f"    –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {order['criticality']}")
                print(f"    –ü–æ–∫—Ä—ã—Ç–∏–µ: {order['coverage_days']:.1f} –¥–Ω–µ–π")
                print(f"    –ë—ã–ª–æ –¥–Ω–µ–π –¥–æ OoS: {order['days_until_oos']}")
                print(f"    –°—Ç–∞–Ω–µ—Ç –¥–Ω–µ–π –¥–æ OoS: {order['new_oos_date']}")
                
                # ML-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                ml_info = order.get('ml_forecast', {})
                if ml_info:
                    print(f"    ML-–ø—Ä–æ–≥–Ω–æ–∑: {ml_info.get('predicted_consumption', 0):.2f} –µ–¥/–¥–µ–Ω—å")
                    print(f"    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_info.get('confidence', 0):.1%}")
                    print(f"    –¢—Ä–µ–Ω–¥: {ml_info.get('trend', 'stable')}")
            
            # ML-–∏–Ω—Å–∞–π—Ç—ã
            ml_insights = result.get('ml_insights', {})
            if ml_insights:
                print("\nüß† ML-–ò–ù–°–ê–ô–¢–´:")
                
                trends = ml_insights.get('trends', {})
                if trends:
                    print("üìà –¢—Ä–µ–Ω–¥—ã:")
                    for trend, products in trends.items():
                        print(f"  {trend}: {', '.join(products)}")
                
                seasonality = ml_insights.get('seasonality_impact', {})
                if seasonality:
                    print("üåç –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:")
                    for impact, products in seasonality.items():
                        print(f"  {impact}: {', '.join(products)}")
                
                confidence = ml_insights.get('confidence_levels', {})
                if confidence:
                    print("üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:")
                    high_conf = confidence.get('high', [])
                    low_conf = confidence.get('low', [])
                    if high_conf:
                        print(f"  –í—ã—Å–æ–∫–∞—è: {', '.join(high_conf)}")
                    if low_conf:
                        print(f"  –ù–∏–∑–∫–∞—è: {', '.join(low_conf)}")
                
                recommendations = ml_insights.get('recommendations', [])
                if recommendations:
                    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for rec in recommendations:
                        print(f"  ‚Ä¢ {rec}")
        else:
            print(f"‚ùå –ó–∞–∫–∞–∑ –ù–ï –ù–£–ñ–ï–ù")
            print(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ML-–∏–Ω—Å–∞–π—Ç—ã –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω—É–∂–µ–Ω
            ml_insights = result.get('ml_insights', {})
            if ml_insights:
                print("\nüß† ML-–ò–ù–°–ê–ô–¢–´:")
                trends = ml_insights.get('trends', {})
                if trends:
                    print("üìà –¢—Ä–µ–Ω–¥—ã:")
                    for trend, products in trends.items():
                        print(f"  {trend}: {', '.join(products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open('intelligent_optimizer_results.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: intelligent_optimizer_results.json")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None

async def test_api_endpoint():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint"""
    
    print("\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINT")
    print("=" * 40)
    
    try:
        import httpx
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        test_request = {
            "sku_data": [
                {"code": "30001", "stock": 385, "consumption": 1, "diopter": -0.5},
                {"code": "30002", "stock": 154, "consumption": 1, "diopter": -0.75},
                {"code": "30003", "stock": 103, "consumption": 1, "diopter": -1.00},
                {"code": "30004", "stock": 80, "consumption": 1, "diopter": -1.25},
                {"code": "30005", "stock": 5, "consumption": 1, "diopter": -1.50},
            ],
            "historical_data": [
                {
                    "product_code": "30001",
                    "consumption_history": [1.2, 1.1, 1.3, 1.0, 1.2, 1.4, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.4, 1.1]
                },
                {
                    "product_code": "30002",
                    "consumption_history": [0.8, 0.9, 1.0, 0.8, 0.9, 1.1, 0.8, 0.9, 1.0, 0.8, 0.9, 1.1, 0.8, 0.9]
                },
                {
                    "product_code": "30003",
                    "consumption_history": [1.0, 1.1, 1.0, 1.2, 1.0, 1.1, 1.0, 1.2, 1.0, 1.1, 1.0, 1.2, 1.0, 1.1]
                },
                {
                    "product_code": "30004",
                    "consumption_history": [0.7, 0.8, 0.7, 0.9, 0.7, 0.8, 0.7, 0.9, 0.7, 0.8, 0.7, 0.9, 0.7, 0.8]
                },
                {
                    "product_code": "30005",
                    "consumption_history": [0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6]
                }
            ],
            "ml_forecasting": True,
            "delivery_optimization": True
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "http://localhost:8000/optimize",
                json=test_request,
                timeout=30.0
            )
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ API –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: {result.get('total_volume', 0)} –µ–¥.")
                print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {result.get('utilization', 0):.1f}%")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.2f} —Å–µ–∫")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã API
                with open('api_optimizer_results.json', 'w', encoding='utf-8') as f:
                    json.dump(result, f, ensure_ascii=False, indent=2, default=str)
                
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã API —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: api_optimizer_results.json")
                
                return result
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    result = await test_intelligent_optimizer()
    
    if result:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API (–µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω)
    print("\n" + "=" * 70)
    api_result = await test_api_endpoint()
    
    if api_result:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
    
    print("\n" + "=" * 70)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    asyncio.run(main()) 