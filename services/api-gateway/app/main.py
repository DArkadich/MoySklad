"""
Horiens API Gateway
–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import logging
from datetime import datetime
from typing import Dict, Any

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import httpx
import uvicorn

from app.core.config import settings
from app.core.redis_client import get_redis_client
from app.utils.logging_config import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Horiens API Gateway",
    description="API Gateway –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—É–ø–æ–∫",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# HTTP –∫–ª–∏–µ–Ω—Ç
http_client = httpx.AsyncClient(timeout=30.0)


class HealthCheck(BaseModel):
    status: str = "healthy"
    timestamp: datetime = Field(default_factory=datetime.now)
    services: Dict[str, str] = {
        "purchase_service": "connected",
        "ml_service": "connected",
        "moysklad_service": "connected",
        "notification_service": "connected",
        "analytics_service": "connected"
    }


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Horiens API Gateway")


@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Horiens API Gateway")
    await http_client.aclose()


@app.get("/health", response_model=HealthCheck)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API Gateway"""
    return HealthCheck()


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Horiens Purchase Agent API Gateway",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat(),
        "services": {
            "purchase": "/api/v1/purchase",
            "ml": "/api/v1/ml",
            "analytics": "/api/v1/analytics",
            "docs": "/docs"
        }
    }


# –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–∏—Å–∞–º
@app.api_route("/api/v1/purchase/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def purchase_proxy(request: Request, path: str):
    """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–∏—Å—É –∑–∞–∫—É–ø–æ–∫"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = None
        if request.method in ["POST", "PUT"]:
            body = await request.body()
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL
        url = f"http://purchase-service:8001/{path}"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        response = await http_client.request(
            method=request.method,
            url=url,
            params=request.query_params,
            headers=dict(request.headers),
            content=body
        )
        
        return JSONResponse(
            content=response.json(),
            status_code=response.status_code,
            headers=dict(response.headers)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫ purchase service: {e}")
        raise HTTPException(status_code=500, detail="Service unavailable")


@app.api_route("/api/v1/ml/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def ml_proxy(request: Request, path: str):
    """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ ML —Å–µ—Ä–≤–∏—Å—É"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = None
        if request.method in ["POST", "PUT"]:
            body = await request.body()
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL
        url = f"http://ml-service:8002/{path}"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        response = await http_client.request(
            method=request.method,
            url=url,
            params=request.query_params,
            headers=dict(request.headers),
            content=body
        )
        
        return JSONResponse(
            content=response.json(),
            status_code=response.status_code,
            headers=dict(response.headers)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫ ml service: {e}")
        raise HTTPException(status_code=500, detail="Service unavailable")


@app.api_route("/api/v1/analytics/{path:path}", methods=["GET", "POST", "PUT", "DELETE"])
async def analytics_proxy(request: Request, path: str):
    """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–∏—Å—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = None
        if request.method in ["POST", "PUT"]:
            body = await request.body()
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL
        url = f"http://analytics-service:8003/{path}"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        response = await http_client.request(
            method=request.method,
            url=url,
            params=request.query_params,
            headers=dict(request.headers),
            content=body
        )
        
        return JSONResponse(
            content=response.json(),
            status_code=response.status_code,
            headers=dict(response.headers)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫ analytics service: {e}")
        raise HTTPException(status_code=500, detail="Service unavailable")


# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
@app.get("/api/v1/products")
async def get_products():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    try:
        response = await http_client.get("http://purchase-service:8001/products")
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="Service unavailable")


@app.get("/api/v1/inventory/status")
async def get_inventory_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    try:
        response = await http_client.get("http://purchase-service:8001/inventory/status")
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="Service unavailable")


@app.post("/api/v1/purchase/recommendations")
async def get_purchase_recommendations():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–∫—É–ø–∫–∞–º"""
    try:
        response = await http_client.post("http://purchase-service:8001/purchase/recommendations")
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        raise HTTPException(status_code=500, detail="Service unavailable")


@app.get("/api/v1/forecast/{product_id}")
async def get_product_forecast(product_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        response = await http_client.get(f"http://ml-service:8002/forecast/{product_id}")
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        raise HTTPException(status_code=500, detail="Service unavailable")


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 