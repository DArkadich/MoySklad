#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–æ–≤
–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –±—É–¥—É—â–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ML-–º–æ–¥–µ–ª–µ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
"""

from product_rules import ProductRules
from ml_integration import MLServiceIntegration
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import json
import logging
import numpy as np
import asyncio
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class MLForecast:
    """–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç ML-–º–æ–¥–µ–ª–∏"""
    predicted_consumption: float
    confidence: float
    trend: str  # 'increasing', 'decreasing', 'stable'
    seasonality_factor: float
    next_month_forecast: float

@dataclass
class DeliveryOptimization:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    can_combine: bool
    delivery_savings_days: int
    recommended_delivery_date: str
    combined_products: List[str]
    separate_products: List[str]

class IntelligentOrderOptimizer:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.product_rules = ProductRules()
        self.ml_models = {}  # –ö—ç—à ML-–º–æ–¥–µ–ª–µ–π
        self.seasonality_data = {}  # –î–∞–Ω–Ω—ã–µ –æ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        
    def load_ml_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ML-–º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ML-—Å–µ—Ä–≤–∏—Å–æ–º
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ ML-–º–æ–¥–µ–ª–µ–π...")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ML-–º–æ–¥–µ–ª–µ–π: {e}")
            return False
    
    async def get_ml_forecast(self, product_code: str, historical_data: List[float]) -> MLForecast:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç ML-–º–æ–¥–µ–ª–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ML-—Å–µ—Ä–≤–∏—Å–æ–º
            async with MLServiceIntegration() as ml_service:
                forecast_data = await ml_service.get_forecast(product_code, historical_data)
                
                return MLForecast(
                    predicted_consumption=forecast_data['predicted_consumption'],
                    confidence=forecast_data['confidence'],
                    trend=forecast_data['trend'],
                    seasonality_factor=forecast_data['seasonality_factor'],
                    next_month_forecast=forecast_data['next_month_forecast']
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ML-–ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {product_code}: {e}")
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
            if len(historical_data) < 7:
                return MLForecast(
                    predicted_consumption=1.0,
                    confidence=0.5,
                    trend='stable',
                    seasonality_factor=1.0,
                    next_month_forecast=30.0
                )
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            recent_avg = np.mean(historical_data[-7:])
            older_avg = np.mean(historical_data[-14:-7]) if len(historical_data) >= 14 else recent_avg
            
            trend = 'increasing' if recent_avg > older_avg * 1.1 else 'decreasing' if recent_avg < older_avg * 0.9 else 'stable'
            
            # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            seasonality_factor = 1.0
            current_month = datetime.now().month
            if current_month in [12, 1, 2]:  # –ó–∏–º–∞
                seasonality_factor = 0.9
            elif current_month in [6, 7, 8]:  # –õ–µ—Ç–æ
                seasonality_factor = 1.1
            
            return MLForecast(
                predicted_consumption=recent_avg * seasonality_factor,
                confidence=0.8,
                trend=trend,
                seasonality_factor=seasonality_factor,
                next_month_forecast=recent_avg * 30 * seasonality_factor
            )
    
    async def analyze_intelligent_order(self, category_sku_data: List[Dict], 
                                      historical_data: Optional[Dict[str, List[float]]] = None) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        print(f"üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–ö–ê–ó–ê (ML-–≤–µ—Ä—Å–∏—è)")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU: {len(category_sku_data)}")
        print()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ML-–º–æ–¥–µ–ª–∏
        self.load_ml_models()
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π SKU —Å ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        analyzed_skus = []
        for sku_data in category_sku_data:
            historical = historical_data.get(sku_data['code'], []) if historical_data else []
            analysis = await self.analyze_single_sku_ml(sku_data, historical)
            if analysis:
                analyzed_skus.append(analysis)
        
        # 2. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—É–≥—Ä–æ–∑–∞ OoS + ML-–ø—Ä–æ–≥–Ω–æ–∑)
        analyzed_skus.sort(key=lambda x: x['priority_score'], reverse=True)
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
        category_info = self.get_category_info(analyzed_skus[0]['product_code'])
        min_order = category_info['min_order']
        
        print(f"üì¶ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ó–ê–ö–ê–ó –ö–ê–¢–ï–ì–û–†–ò–ò: {min_order} –µ–¥.")
        print()
        
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_optimization = self.analyze_delivery_optimization(analyzed_skus)
        
        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
        optimal_order = self.build_intelligent_order_ml(analyzed_skus, min_order, delivery_optimization)
        
        return optimal_order
    
    async def analyze_single_sku_ml(self, sku_data: Dict, historical_data: List[float]) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω SKU —Å ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        product_code = sku_data['code']
        current_stock = sku_data['stock']
        daily_consumption = sku_data['consumption']
        diopter = sku_data.get('diopter', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
        rules = self.product_rules.get_product_rules(product_code)
        if not rules:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º ML-–ø—Ä–æ–≥–Ω–æ–∑
        ml_forecast = await self.get_ml_forecast(product_code, historical_data)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ML-–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        adjusted_consumption = ml_forecast.predicted_consumption
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ OoS —Å —É—á–µ—Ç–æ–º ML-–ø—Ä–æ–≥–Ω–æ–∑–∞
        days_until_oos = int(current_stock / adjusted_consumption) if adjusted_consumption > 0 else 999
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∑–∞–ø–∞—Å —Å —É—á–µ—Ç–æ–º ML-–ø—Ä–æ–≥–Ω–æ–∑–∞
        required_stock = self.product_rules.calculate_required_stock(product_code, adjusted_consumption, False)
        recommended_order = max(0, required_stock - current_stock)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å —É—á–µ—Ç–æ–º ML-–ø—Ä–æ–≥–Ω–æ–∑–∞
        base_priority = 1000 - days_until_oos
        ml_confidence_bonus = ml_forecast.confidence * 100
        trend_bonus = 50 if ml_forecast.trend == 'increasing' else -20 if ml_forecast.trend == 'decreasing' else 0
        priority_score = base_priority + ml_confidence_bonus + trend_bonus
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º ML-–ø—Ä–æ–≥–Ω–æ–∑–∞
        if days_until_oos <= 0:
            criticality = "CRITICAL"
        elif days_until_oos <= 7:
            criticality = "HIGH"
        elif days_until_oos <= 30:
            criticality = "MEDIUM"
        else:
            criticality = "LOW"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ ML-–ø—Ä–æ–≥–Ω–æ–∑–µ
        ml_info = {
            'predicted_consumption': adjusted_consumption,
            'confidence': ml_forecast.confidence,
            'trend': ml_forecast.trend,
            'seasonality_factor': ml_forecast.seasonality_factor,
            'next_month_forecast': ml_forecast.next_month_forecast
        }
        
        return {
            'product_code': product_code,
            'diopter': diopter,
            'current_stock': current_stock,
            'daily_consumption': daily_consumption,
            'adjusted_consumption': adjusted_consumption,
            'days_until_oos': days_until_oos,
            'required_stock': required_stock,
            'recommended_order': recommended_order,
            'priority_score': priority_score,
            'criticality': criticality,
            'rules': rules,
            'ml_forecast': ml_info
        }
    
    def analyze_delivery_optimization(self, analyzed_skus: List[Dict]) -> DeliveryOptimization:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        product_codes = [sku['product_code'] for sku in analyzed_skus]
        optimization = self.product_rules.get_delivery_optimization(product_codes)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_date = datetime.now() + timedelta(days=57)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫
        
        return DeliveryOptimization(
            can_combine=optimization['can_combine_delivery'],
            delivery_savings_days=optimization['delivery_savings_days'],
            recommended_delivery_date=delivery_date.strftime('%Y-%m-%d'),
            combined_products=product_codes if optimization['can_combine_delivery'] else [],
            separate_products=product_codes if not optimization['can_combine_delivery'] else []
        )
    
    def build_intelligent_order_ml(self, analyzed_skus: List[Dict], min_order: int, 
                                 delivery_optimization: DeliveryOptimization) -> Dict:
        """–°—Ç—Ä–æ–∏—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ —Å ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        print("üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê (ML-–≤–µ—Ä—Å–∏—è):")
        print("=" * 70)
        
        # –ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        print("üöö –ê–ù–ê–õ–ò–ó –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –î–û–°–¢–ê–í–ö–ò:")
        if delivery_optimization.can_combine:
            print(f"  ‚úÖ –ú–æ–∂–µ—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")
            print(f"  üí∞ –≠–∫–æ–Ω–æ–º–∏—è: {delivery_optimization.delivery_savings_days} –¥–Ω–µ–π")
            print(f"  üì¶ –û–±—ä–µ–¥–∏–Ω—è–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã: {len(delivery_optimization.combined_products)}")
        else:
            print(f"  ‚ùå –†–∞–∑–¥–µ–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞")
        print()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º SKU —Å —É–≥—Ä–æ–∑–æ–π OoS (—Å —É—á–µ—Ç–æ–º ML-–ø—Ä–æ–≥–Ω–æ–∑–∞)
        critical_skus = [sku for sku in analyzed_skus if sku['days_until_oos'] <= 30]
        
        if not critical_skus:
            print("‚úÖ –ù–µ—Ç SKU —Å —É–≥—Ä–æ–∑–æ–π OoS - –∑–∞–∫–∞–∑ –Ω–µ –Ω—É–∂–µ–Ω")
            return {
                'order_needed': False,
                'reason': '–ù–µ—Ç —É–≥—Ä–æ–∑—ã OoS',
                'total_volume': 0,
                'sku_orders': [],
                'ml_insights': self.generate_ml_insights(analyzed_skus)
            }
        
        print(f"üö® SKU —Å —É–≥—Ä–æ–∑–æ–π OoS: {len(critical_skus)}")
        for sku in critical_skus:
            ml_info = sku['ml_forecast']
            print(f"  {sku['product_code']} ({sku['diopter']:+.2f}): {sku['days_until_oos']} –¥–Ω–µ–π –¥–æ OoS")
            print(f"    ML-–ø—Ä–æ–≥–Ω–æ–∑: {ml_info['predicted_consumption']:.2f} –µ–¥/–¥–µ–Ω—å (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_info['confidence']:.1%})")
            print(f"    –¢—Ä–µ–Ω–¥: {ml_info['trend']}, –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: {ml_info['seasonality_factor']:.2f}")
        print()
        
        # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å ML-—É—á–µ—Ç–æ–º
        sku_orders = []
        remaining_volume = min_order
        current_date = 0
        
        print("üìä –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê (ML-–≤–µ—Ä—Å–∏—è):")
        print("-" * 50)
        
        while remaining_volume > 0:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –∫—Ä–∏—Ç–∏—á–Ω—ã–π SKU —Å —É—á–µ—Ç–æ–º ML-–ø—Ä–æ–≥–Ω–æ–∑–∞
            current_sku = None
            for sku in critical_skus:
                if sku['days_until_oos'] <= current_date:
                    current_sku = sku
                    break
            
            if not current_sku:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö SKU, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å —É—á–µ—Ç–æ–º ML-–ø—Ä–æ–≥–Ω–æ–∑–∞
                for sku in analyzed_skus:
                    if sku['days_until_oos'] > current_date and sku['recommended_order'] > 0:
                        current_sku = sku
                        break
            
            if not current_sku:
                break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ SKU —Å —É—á–µ—Ç–æ–º ML-–ø—Ä–æ–≥–Ω–æ–∑–∞
            needed_volume = min(current_sku['recommended_order'], remaining_volume)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å
            multiple = current_sku['rules']['multiple']
            if multiple > 1:
                needed_volume = ((needed_volume + multiple - 1) // multiple) * multiple
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–º—Å—è –æ–±—ä–µ–º–æ–º
            final_volume = min(needed_volume, remaining_volume)
            
            if final_volume > 0:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É OoS —Å —É—á–µ—Ç–æ–º –∑–∞–∫–∞–∑–∞ –∏ ML-–ø—Ä–æ–≥–Ω–æ–∑–∞
                adjusted_consumption = current_sku['adjusted_consumption']
                new_oos_date = self.calculate_future_oos_date_ml(current_sku, final_volume, adjusted_consumption)
                
                sku_order = {
                    'product_code': current_sku['product_code'],
                    'diopter': current_sku['diopter'],
                    'volume': final_volume,
                    'days_until_oos': current_sku['days_until_oos'],
                    'new_oos_date': new_oos_date,
                    'criticality': current_sku['criticality'],
                    'coverage_days': final_volume / adjusted_consumption if adjusted_consumption > 0 else 0,
                    'ml_forecast': current_sku['ml_forecast']
                }
                sku_orders.append(sku_order)
                remaining_volume -= final_volume
                
                print(f"  ‚úÖ {current_sku['product_code']} ({current_sku['diopter']:+.2f}): {final_volume} –µ–¥.")
                print(f"     –ë—ã–ª–æ –¥–Ω–µ–π –¥–æ OoS: {current_sku['days_until_oos']}")
                print(f"     –°—Ç–∞–Ω–µ—Ç –¥–Ω–µ–π –¥–æ OoS: {new_oos_date}")
                print(f"     –ü–æ–∫—Ä—ã—Ç–∏–µ: {sku_order['coverage_days']:.1f} –¥–Ω–µ–π")
                print(f"     ML-–ø—Ä–æ–≥–Ω–æ–∑: {adjusted_consumption:.2f} –µ–¥/–¥–µ–Ω—å")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É OoS –¥–ª—è —ç—Ç–æ–≥–æ SKU
                current_sku['days_until_oos'] = new_oos_date
                current_date = new_oos_date
            else:
                break
        
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–±—ä–µ–º, –∑–∞–ø–æ–ª–Ω—è–µ–º –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ SKU
        if remaining_volume > 0:
            print(f"\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å –æ–±—ä–µ–º–∞: {remaining_volume} –µ–¥.")
            print("–ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ SKU:")
            
            for sku in analyzed_skus:
                if remaining_volume <= 0:
                    break
                
                if sku['recommended_order'] > 0:
                    needed_volume = min(sku['recommended_order'], remaining_volume)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å
                    multiple = sku['rules']['multiple']
                    if multiple > 1:
                        needed_volume = ((needed_volume + multiple - 1) // multiple) * multiple
                    
                    final_volume = min(needed_volume, remaining_volume)
                    
                    if final_volume > 0:
                        adjusted_consumption = sku['adjusted_consumption']
                        new_oos_date = self.calculate_future_oos_date_ml(sku, final_volume, adjusted_consumption)
                        
                        sku_order = {
                            'product_code': sku['product_code'],
                            'diopter': sku['diopter'],
                            'volume': final_volume,
                            'days_until_oos': sku['days_until_oos'],
                            'new_oos_date': new_oos_date,
                            'criticality': sku['criticality'],
                            'coverage_days': final_volume / adjusted_consumption if adjusted_consumption > 0 else 0,
                            'ml_forecast': sku['ml_forecast']
                        }
                        sku_orders.append(sku_order)
                        remaining_volume -= final_volume
                        
                        print(f"  ‚úÖ {sku['product_code']} ({sku['diopter']:+.2f}): {final_volume} –µ–¥.")
                        print(f"     –ü–æ–∫—Ä—ã—Ç–∏–µ: {sku_order['coverage_days']:.1f} –¥–Ω–µ–π")
                        print(f"     ML-–ø—Ä–æ–≥–Ω–æ–∑: {adjusted_consumption:.2f} –µ–¥/–¥–µ–Ω—å")
        
        total_volume = sum(order['volume'] for order in sku_orders)
        
        print(f"\nüìä –ò–¢–û–ì–û:")
        print(f"  –û–±—â–∏–π –æ–±—ä–µ–º: {total_volume} –µ–¥.")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU: {len(sku_orders)}")
        print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {total_volume}/{min_order} ({total_volume/min_order*100:.1f}%)")
        
        return {
            'order_needed': True,
            'total_volume': total_volume,
            'min_order': min_order,
            'utilization': total_volume / min_order * 100,
            'sku_orders': sku_orders,
            'order_date': datetime.now().strftime('%Y-%m-%d'),
            'delivery_date': delivery_optimization.recommended_delivery_date,
            'delivery_optimization': {
                'can_combine': delivery_optimization.can_combine,
                'savings_days': delivery_optimization.delivery_savings_days,
                'combined_products': delivery_optimization.combined_products,
                'separate_products': delivery_optimization.separate_products
            },
            'ml_insights': self.generate_ml_insights(analyzed_skus)
        }
    
    def calculate_future_oos_date_ml(self, sku: Dict, additional_stock: int, adjusted_consumption: float) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É OoS —Å —É—á–µ—Ç–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ –∏ ML-–ø—Ä–æ–≥–Ω–æ–∑–∞"""
        total_stock = sku['current_stock'] + additional_stock
        if adjusted_consumption <= 0:
            return 999
        return int(total_stock / adjusted_consumption)
    
    def generate_ml_insights(self, analyzed_skus: List[Dict]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ ML-–∞–Ω–∞–ª–∏–∑–∞"""
        insights = {
            'trends': {},
            'seasonality_impact': {},
            'confidence_levels': {},
            'recommendations': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        trends = {}
        for sku in analyzed_skus:
            ml_info = sku['ml_forecast']
            trend = ml_info['trend']
            if trend not in trends:
                trends[trend] = []
            trends[trend].append(sku['product_code'])
        
        insights['trends'] = trends
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        seasonality_impact = {}
        for sku in analyzed_skus:
            ml_info = sku['ml_forecast']
            factor = ml_info['seasonality_factor']
            if factor > 1.05:
                seasonality_impact['increasing'] = seasonality_impact.get('increasing', []) + [sku['product_code']]
            elif factor < 0.95:
                seasonality_impact['decreasing'] = seasonality_impact.get('decreasing', []) + [sku['product_code']]
        
        insights['seasonality_impact'] = seasonality_impact
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        high_confidence = [sku['product_code'] for sku in analyzed_skus if sku['ml_forecast']['confidence'] > 0.8]
        low_confidence = [sku['product_code'] for sku in analyzed_skus if sku['ml_forecast']['confidence'] < 0.5]
        
        insights['confidence_levels'] = {
            'high': high_confidence,
            'low': low_confidence
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        
        if len(trends.get('increasing', [])) > len(analyzed_skus) * 0.3:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        
        if len(seasonality_impact.get('increasing', [])) > 0:
            recommendations.append("–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Å–ø—Ä–æ—Å–∞")
        
        if len(low_confidence) > 0:
            recommendations.append("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        insights['recommendations'] = recommendations
        
        return insights
    
    def get_category_info(self, product_code: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        rules = self.product_rules.get_product_rules(product_code)
        if not rules:
            return {'min_order': 5000, 'multiple': 30}
        
        return {
            'min_order': rules['min_order'],
            'multiple': rules['multiple'],
            'category': rules.get('category', 'unknown')
        }

async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ —Å ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–∞—à –ø—Ä–∏–º–µ—Ä)
    test_data = [
        {'code': '30001', 'stock': 385, 'consumption': 1, 'diopter': -0.5},
        {'code': '30002', 'stock': 154, 'consumption': 1, 'diopter': -0.75},
        {'code': '30003', 'stock': 103, 'consumption': 1, 'diopter': -1.00},
        {'code': '30004', 'stock': 80, 'consumption': 1, 'diopter': -1.25},
        {'code': '30005', 'stock': 5, 'consumption': 1, 'diopter': -1.50},
    ]
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    historical_data = {
        '30001': [1.2, 1.1, 1.3, 1.0, 1.2, 1.4, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.4, 1.1],
        '30002': [0.8, 0.9, 1.0, 0.8, 0.9, 1.1, 0.8, 0.9, 1.0, 0.8, 0.9, 1.1, 0.8, 0.9],
        '30003': [1.0, 1.1, 1.0, 1.2, 1.0, 1.1, 1.0, 1.2, 1.0, 1.1, 1.0, 1.2, 1.0, 1.1],
        '30004': [0.7, 0.8, 0.7, 0.9, 0.7, 0.8, 0.7, 0.9, 0.7, 0.8, 0.7, 0.9, 0.7, 0.8],
        '30005': [0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6],
    }
    
    optimizer = IntelligentOrderOptimizer()
    result = await optimizer.analyze_intelligent_order(test_data, historical_data)
    
    print("\n" + "=" * 70)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ô –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò (ML-–≤–µ—Ä—Å–∏—è):")
    print("=" * 70)
    
    if result['order_needed']:
        print(f"‚úÖ –ó–∞–∫–∞–∑ –ù–£–ñ–ï–ù")
        print(f"üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: {result['total_volume']} –µ–¥.")
        print(f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {result['order_date']}")
        print(f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {result['delivery_date']}")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {result['utilization']:.1f}%")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_opt = result.get('delivery_optimization', {})
        if delivery_opt.get('can_combine'):
            print(f"üöö –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: ‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞")
            print(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è: {delivery_opt.get('savings_days', 0)} –¥–Ω–µ–π")
        else:
            print(f"üöö –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: ‚ùå –†–∞–∑–¥–µ–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞")
        
        print("\nüìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê:")
        for order in result['sku_orders']:
            print(f"  {order['product_code']} ({order['diopter']:+.2f}): {order['volume']} –µ–¥.")
            print(f"    –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {order['criticality']}")
            print(f"    –ü–æ–∫—Ä—ã—Ç–∏–µ: {order['coverage_days']:.1f} –¥–Ω–µ–π")
            print(f"    –ë—ã–ª–æ –¥–Ω–µ–π –¥–æ OoS: {order['days_until_oos']}")
            print(f"    –°—Ç–∞–Ω–µ—Ç –¥–Ω–µ–π –¥–æ OoS: {order['new_oos_date']}")
            
            # ML-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            ml_info = order.get('ml_forecast', {})
            if ml_info:
                print(f"    ML-–ø—Ä–æ–≥–Ω–æ–∑: {ml_info.get('predicted_consumption', 0):.2f} –µ–¥/–¥–µ–Ω—å")
                print(f"    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_info.get('confidence', 0):.1%}")
                print(f"    –¢—Ä–µ–Ω–¥: {ml_info.get('trend', 'stable')}")
        
        # ML-–∏–Ω—Å–∞–π—Ç—ã
        ml_insights = result.get('ml_insights', {})
        if ml_insights:
            print("\nüß† ML-–ò–ù–°–ê–ô–¢–´:")
            
            trends = ml_insights.get('trends', {})
            if trends:
                print("üìà –¢—Ä–µ–Ω–¥—ã:")
                for trend, products in trends.items():
                    print(f"  {trend}: {', '.join(products)}")
            
            seasonality = ml_insights.get('seasonality_impact', {})
            if seasonality:
                print("üåç –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:")
                for impact, products in seasonality.items():
                    print(f"  {impact}: {', '.join(products)}")
            
            confidence = ml_insights.get('confidence_levels', {})
            if confidence:
                print("üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:")
                high_conf = confidence.get('high', [])
                low_conf = confidence.get('low', [])
                if high_conf:
                    print(f"  –í—ã—Å–æ–∫–∞—è: {', '.join(high_conf)}")
                if low_conf:
                    print(f"  –ù–∏–∑–∫–∞—è: {', '.join(low_conf)}")
            
            recommendations = ml_insights.get('recommendations', [])
            if recommendations:
                print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for rec in recommendations:
                    print(f"  ‚Ä¢ {rec}")
    else:
        print(f"‚ùå –ó–∞–∫–∞–∑ –ù–ï –ù–£–ñ–ï–ù")
        print(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ML-–∏–Ω—Å–∞–π—Ç—ã –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω—É–∂–µ–Ω
        ml_insights = result.get('ml_insights', {})
        if ml_insights:
            print("\nüß† ML-–ò–ù–°–ê–ô–¢–´:")
            trends = ml_insights.get('trends', {})
            if trends:
                print("üìà –¢—Ä–µ–Ω–¥—ã:")
                for trend, products in trends.items():
                    print(f"  {trend}: {', '.join(products)}")

if __name__ == "__main__":
    asyncio.run(main()) 