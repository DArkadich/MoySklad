#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
"""

from category_order_optimizer import CategoryOrderOptimizer

def test_realistic_scenario():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
    
    print("üßÆ –¢–ï–°–¢ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø")
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    print()
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–æ–¥, –æ—Å—Ç–∞—Ç–∫–∏, –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ/–¥–µ–Ω—å, –¥–∏–æ–ø—Ç—Ä–∏–∏)
    realistic_data = [
        {'code': '30001', 'stock': 100, 'consumption': 5, 'diopter': -0.5},    # 20 –¥–Ω–µ–π –¥–æ OoS
        {'code': '30002', 'stock': 50, 'consumption': 8, 'diopter': -0.75},    # 6.25 –¥–Ω–µ–π –¥–æ OoS
        {'code': '30003', 'stock': 30, 'consumption': 10, 'diopter': -1.00},   # 3 –¥–Ω—è –¥–æ OoS
        {'code': '30004', 'stock': 15, 'consumption': 12, 'diopter': -1.25},   # 1.25 –¥–Ω—è –¥–æ OoS
        {'code': '30005', 'stock': 5, 'consumption': 15, 'diopter': -1.50},    # 0.33 –¥–Ω—è –¥–æ OoS
    ]
    
    print("üìä –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
    print("–ö–æ–¥ SKU | –î–∏–æ–ø—Ç—Ä–∏–∏ | –û—Å—Ç–∞—Ç–∫–∏ | –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ/–¥–µ–Ω—å | –î–Ω–µ–π –¥–æ OoS")
    print("-" * 70)
    for sku in realistic_data:
        days_until_oos = sku['stock'] / sku['consumption']
        print(f"{sku['code']:8} | {sku['diopter']:8.2f} | {sku['stock']:7} | {sku['consumption']:16} | {days_until_oos:10.1f}")
    print()
    
    optimizer = CategoryOrderOptimizer()
    result = optimizer.analyze_category_order(realistic_data)
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("=" * 60)
    
    if result['order_needed']:
        print(f"‚úÖ –ó–∞–∫–∞–∑ –ù–£–ñ–ï–ù")
        print(f"üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: {result['total_volume']} –µ–¥.")
        print(f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {result['order_date']}")
        print(f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {result['delivery_date']}")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {result['utilization']:.1f}%")
        
        print("\nüìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê:")
        for order in result['sku_orders']:
            print(f"  {order['product_code']} ({order['diopter']:+.2f}): {order['volume']} –µ–¥.")
            print(f"    –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {order['criticality']}")
            print(f"    –ü–æ–∫—Ä—ã—Ç–∏–µ: {order['coverage_days']:.1f} –¥–Ω–µ–π")
            print(f"    –î–Ω–µ–π –¥–æ OoS: {order['days_until_oos']}")
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
        critical_orders = [o for o in result['sku_orders'] if o['criticality'] in ['CRITICAL', 'HIGH']]
        medium_orders = [o for o in result['sku_orders'] if o['criticality'] == 'MEDIUM']
        low_orders = [o for o in result['sku_orders'] if o['criticality'] == 'LOW']
        
        print(f"  –ö—Ä–∏—Ç–∏—á–Ω—ã–µ SKU: {len(critical_orders)}")
        print(f"  –°—Ä–µ–¥–Ω–∏–µ SKU: {len(medium_orders)}")
        print(f"  –ù–∏–∑–∫–∏–µ SKU: {len(low_orders)}")
        
        total_coverage = sum(o['coverage_days'] for o in result['sku_orders'])
        print(f"  –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {total_coverage:.1f} –¥–Ω–µ–π")
        
    else:
        print(f"‚ùå –ó–∞–∫–∞–∑ –ù–ï –ù–£–ñ–ï–ù")
        print(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")

def test_extreme_scenario():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É–≥—Ä–æ–∑–∞–º–∏ OoS"""
    
    print("\n" + "=" * 80)
    print("üö® –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô")
    print("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã OoS - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é")
    print("=" * 80)
    
    # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    extreme_data = [
        {'code': '30001', 'stock': 10, 'consumption': 5, 'diopter': -0.5},     # 2 –¥–Ω—è –¥–æ OoS
        {'code': '30002', 'stock': 5, 'consumption': 8, 'diopter': -0.75},     # 0.6 –¥–Ω—è –¥–æ OoS
        {'code': '30003', 'stock': 2, 'consumption': 10, 'diopter': -1.00},    # 0.2 –¥–Ω—è –¥–æ OoS
        {'code': '30004', 'stock': 1, 'consumption': 12, 'diopter': -1.25},    # 0.08 –¥–Ω—è –¥–æ OoS
        {'code': '30005', 'stock': 0, 'consumption': 15, 'diopter': -1.50},    # 0 –¥–Ω–µ–π –¥–æ OoS
    ]
    
    print("üìä –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
    print("–ö–æ–¥ SKU | –î–∏–æ–ø—Ç—Ä–∏–∏ | –û—Å—Ç–∞—Ç–∫–∏ | –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ/–¥–µ–Ω—å | –î–Ω–µ–π –¥–æ OoS")
    print("-" * 70)
    for sku in extreme_data:
        days_until_oos = sku['stock'] / sku['consumption']
        print(f"{sku['code']:8} | {sku['diopter']:8.2f} | {sku['stock']:7} | {sku['consumption']:16} | {days_until_oos:10.1f}")
    print()
    
    optimizer = CategoryOrderOptimizer()
    result = optimizer.analyze_category_order(extreme_data)
    
    print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø:")
    print("=" * 60)
    
    if result['order_needed']:
        print(f"‚úÖ –ó–∞–∫–∞–∑ –ù–£–ñ–ï–ù")
        print(f"üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: {result['total_volume']} –µ–¥.")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {result['utilization']:.1f}%")
        
        print("\nüìã –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –ó–ê–ö–ê–ó:")
        for order in result['sku_orders']:
            print(f"  {order['product_code']} ({order['diopter']:+.2f}): {order['volume']} –µ–¥.")
            print(f"    –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {order['criticality']}")
            print(f"    –ü–æ–∫—Ä—ã—Ç–∏–µ: {order['coverage_days']:.1f} –¥–Ω–µ–π")
            print(f"    –î–Ω–µ–π –¥–æ OoS: {order['days_until_oos']}")
    else:
        print(f"‚ùå –ó–∞–∫–∞–∑ –ù–ï –ù–£–ñ–ï–ù")
        print(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_realistic_scenario()
    test_extreme_scenario()

if __name__ == "__main__":
    main() 