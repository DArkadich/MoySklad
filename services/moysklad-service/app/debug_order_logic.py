#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤
"""

from product_rules import ProductRules

def debug_order_calculation(product_code, current_stock, daily_consumption):
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê –†–ê–°–ß–ï–¢–ê –ó–ê–ö–ê–ó–ê –î–õ–Ø {product_code}")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
    rules = ProductRules.get_product_rules(product_code)
    if not rules:
        print(f"‚ùå –¢–æ–≤–∞—Ä {product_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö")
        return
    
    print(f"üì¶ –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: {current_stock} –µ–¥.")
    print(f"üìä –î–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {daily_consumption} –µ–¥./–¥–µ–Ω—å")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ OoS
    days_until_oos = int(current_stock / daily_consumption) if daily_consumption > 0 else 999
    print(f"‚è∞ –û—Å—Ç–∞—Ç–∫–æ–≤ —Ö–≤–∞—Ç–∏—Ç –Ω–∞: {days_until_oos} –¥–Ω–µ–π")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∑–∞–ø–∞—Å
    safety_stock_days = rules['safety_stock_days']
    safety_stock = daily_consumption * safety_stock_days
    print(f"üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–æ–π –∑–∞–ø–∞—Å: {safety_stock} –µ–¥. ({safety_stock_days} –¥–Ω–µ–π)")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∑–∞–ø–∞—Å
    required_stock = ProductRules.calculate_required_stock(product_code, daily_consumption, False)
    total_lead_time = ProductRules.get_total_lead_time(product_code, False)
    print(f"üì¶ –û–±—â–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∑–∞–ø–∞—Å: {required_stock} –µ–¥. ({safety_stock_days + total_lead_time} –¥–Ω–µ–π)")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑
    recommended_order = max(0, required_stock - current_stock)
    print(f"üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑: {recommended_order} –µ–¥.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
    min_order = rules['min_order']
    print(f"üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: {min_order} –µ–¥.")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    final_order = ProductRules.apply_order_constraints(product_code, recommended_order)
    print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: {final_order} –µ–¥.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    total_lead_time = ProductRules.get_total_lead_time(product_code, False)
    critical_days = total_lead_time + safety_stock_days
    print(f"üè≠ –û–±—â–∏–π —Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏: {total_lead_time} –¥–Ω–µ–π")
    print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥: {critical_days} –¥–Ω–µ–π")
    
    should_create = ProductRules.should_create_order(product_code, days_until_oos, recommended_order, False)
    print(f"ü§î –ù—É–∂–µ–Ω –∑–∞–∫–∞–∑: {'‚úÖ –î–ê' if should_create else '‚ùå –ù–ï–¢'}")
    
    print()
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
    if recommended_order == 0:
        print("  ‚ùå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑ = 0")
        print(f"     –ü—Ä–∏—á–∏–Ω–∞: –æ–±—â–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∑–∞–ø–∞—Å ({required_stock}) <= —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ ({current_stock})")
        print(f"     {required_stock} <= {current_stock} = {required_stock <= current_stock}")
    elif recommended_order < min_order:
        print(f"  ‚ùå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑ ({recommended_order}) < –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_order})")
    elif days_until_oos > critical_days:
        print(f"  ‚ùå –û—Å—Ç–∞—Ç–∫–æ–≤ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ {days_until_oos} –¥–Ω–µ–π > –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ {critical_days} –¥–Ω–µ–π")
    else:
        print("  ‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    
    return {
        'recommended_order': recommended_order,
        'final_order': final_order,
        'should_create': should_create,
        'safety_stock': safety_stock,
        'current_stock': current_stock
    }

def main():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    test_cases = [
        ('30001', 385, 1),   # -0.5, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 385 –¥–Ω–µ–π
        ('30002', 154, 1),   # -0.75, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 154 –¥–Ω—è
        ('30003', 103, 1),   # -1.00, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 103 –¥–Ω—è
        ('30004', 80, 1),    # -1.25, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 80 –¥–Ω–µ–π
        ('30005', 5, 1),     # -1.50, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 5 –¥–Ω–µ–π
    ]
    
    print("üßÆ –û–¢–õ–ê–î–ö–ê –õ–û–ì–ò–ö–ò –ó–ê–ö–ê–ó–û–í")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É –∑–∞–∫–∞–∑—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è")
    print()
    
    for code, stock, consumption in test_cases:
        result = debug_order_calculation(code, stock, consumption)
        print("-" * 50)
        print()

if __name__ == "__main__":
    main() 