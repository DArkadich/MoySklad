#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É OoS
"""

from product_rules import ProductRules
from datetime import datetime, timedelta
from typing import Dict, List, Tuple
import json

class CategoryOrderOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤"""
    
    def __init__(self):
        self.product_rules = ProductRules()
    
    def analyze_category_order(self, category_sku_data: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        
        print(f"üßÆ –ê–ù–ê–õ–ò–ó –ó–ê–ö–ê–ó–ê –ö–ê–¢–ï–ì–û–†–ò–ò")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU: {len(category_sku_data)}")
        print()
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π SKU
        analyzed_skus = []
        for sku_data in category_sku_data:
            analysis = self.analyze_single_sku(sku_data)
            analyzed_skus.append(analysis)
        
        # 2. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—É–≥—Ä–æ–∑–∞ OoS)
        analyzed_skus.sort(key=lambda x: x['priority_score'], reverse=True)
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
        category_info = self.get_category_info(analyzed_skus[0]['product_code'])
        min_order = category_info['min_order']
        
        print(f"üì¶ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ó–ê–ö–ê–ó –ö–ê–¢–ï–ì–û–†–ò–ò: {min_order} –µ–¥.")
        print()
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
        optimal_order = self.build_optimal_order(analyzed_skus, min_order)
        
        return optimal_order
    
    def analyze_single_sku(self, sku_data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω SKU"""
        product_code = sku_data['code']
        current_stock = sku_data['stock']
        daily_consumption = sku_data['consumption']
        diopter = sku_data.get('diopter', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
        rules = self.product_rules.get_product_rules(product_code)
        if not rules:
            return None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ OoS
        days_until_oos = int(current_stock / daily_consumption) if daily_consumption > 0 else 999
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∑–∞–ø–∞—Å
        required_stock = self.product_rules.calculate_required_stock(product_code, daily_consumption, False)
        recommended_order = max(0, required_stock - current_stock)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–µ–º –º–µ–Ω—å—à–µ –¥–Ω–µ–π –¥–æ OoS, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        priority_score = 1000 - days_until_oos  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
        if days_until_oos <= 0:
            criticality = "CRITICAL"
        elif days_until_oos <= 7:
            criticality = "HIGH"
        elif days_until_oos <= 30:
            criticality = "MEDIUM"
        else:
            criticality = "LOW"
        
        return {
            'product_code': product_code,
            'diopter': diopter,
            'current_stock': current_stock,
            'daily_consumption': daily_consumption,
            'days_until_oos': days_until_oos,
            'required_stock': required_stock,
            'recommended_order': recommended_order,
            'priority_score': priority_score,
            'criticality': criticality,
            'rules': rules
        }
    
    def get_category_info(self, product_code: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        rules = self.product_rules.get_product_rules(product_code)
        if not rules:
            return {'min_order': 5000, 'multiple': 30}
        
        return {
            'min_order': rules['min_order'],
            'multiple': rules['multiple'],
            'category': rules.get('category', 'unknown')
        }
    
    def build_optimal_order(self, analyzed_skus: List[Dict], min_order: int) -> Dict:
        """–°—Ç—Ä–æ–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑"""
        
        print("üìã –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ì–û –ó–ê–ö–ê–ó–ê:")
        print("=" * 60)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º SKU —Å —É–≥—Ä–æ–∑–æ–π OoS
        critical_skus = [sku for sku in analyzed_skus if sku['days_until_oos'] <= 30]
        
        if not critical_skus:
            print("‚úÖ –ù–µ—Ç SKU —Å —É–≥—Ä–æ–∑–æ–π OoS - –∑–∞–∫–∞–∑ –Ω–µ –Ω—É–∂–µ–Ω")
            return {
                'order_needed': False,
                'reason': '–ù–µ—Ç —É–≥—Ä–æ–∑—ã OoS',
                'total_volume': 0,
                'sku_orders': []
            }
        
        print(f"üö® SKU —Å —É–≥—Ä–æ–∑–æ–π OoS: {len(critical_skus)}")
        for sku in critical_skus:
            print(f"  {sku['product_code']} ({sku['diopter']:+.2f}): {sku['days_until_oos']} –¥–Ω–µ–π –¥–æ OoS")
        print()
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        remaining_volume = min_order
        sku_orders = []
        
        for sku in critical_skus:
            if remaining_volume <= 0:
                break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–º –¥–ª—è —ç—Ç–æ–≥–æ SKU
            needed_volume = min(sku['recommended_order'], remaining_volume)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å
            multiple = sku['rules']['multiple']
            if multiple > 1:
                needed_volume = ((needed_volume + multiple - 1) // multiple) * multiple
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–º—Å—è –æ–±—ä–µ–º–æ–º
            final_volume = min(needed_volume, remaining_volume)
            
            if final_volume > 0:
                sku_order = {
                    'product_code': sku['product_code'],
                    'diopter': sku['diopter'],
                    'volume': final_volume,
                    'days_until_oos': sku['days_until_oos'],
                    'criticality': sku['criticality'],
                    'coverage_days': final_volume / sku['daily_consumption'] if sku['daily_consumption'] > 0 else 0
                }
                sku_orders.append(sku_order)
                remaining_volume -= final_volume
                
                print(f"  ‚úÖ {sku['product_code']} ({sku['diopter']:+.2f}): {final_volume} –µ–¥.")
                print(f"     –ü–æ–∫—Ä—ã—Ç–∏–µ: {sku_order['coverage_days']:.1f} –¥–Ω–µ–π")
        
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–±—ä–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ SKU
        if remaining_volume > 0:
            print(f"\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å –æ–±—ä–µ–º–∞: {remaining_volume} –µ–¥.")
            print("–î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ SKU:")
            
            for sku in analyzed_skus:
                if sku['days_until_oos'] > 30 and remaining_volume > 0:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–º –¥–ª—è —ç—Ç–æ–≥–æ SKU
                    needed_volume = min(sku['recommended_order'], remaining_volume)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å
                    multiple = sku['rules']['multiple']
                    if multiple > 1:
                        needed_volume = ((needed_volume + multiple - 1) // multiple) * multiple
                    
                    final_volume = min(needed_volume, remaining_volume)
                    
                    if final_volume > 0:
                        sku_order = {
                            'product_code': sku['product_code'],
                            'diopter': sku['diopter'],
                            'volume': final_volume,
                            'days_until_oos': sku['days_until_oos'],
                            'criticality': sku['criticality'],
                            'coverage_days': final_volume / sku['daily_consumption'] if sku['daily_consumption'] > 0 else 0
                        }
                        sku_orders.append(sku_order)
                        remaining_volume -= final_volume
                        
                        print(f"  ‚úÖ {sku['product_code']} ({sku['diopter']:+.2f}): {final_volume} –µ–¥.")
                        print(f"     –ü–æ–∫—Ä—ã—Ç–∏–µ: {sku_order['coverage_days']:.1f} –¥–Ω–µ–π")
        
        total_volume = sum(order['volume'] for order in sku_orders)
        
        print(f"\nüìä –ò–¢–û–ì–û:")
        print(f"  –û–±—â–∏–π –æ–±—ä–µ–º: {total_volume} –µ–¥.")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU: {len(sku_orders)}")
        print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {total_volume}/{min_order} ({total_volume/min_order*100:.1f}%)")
        
        return {
            'order_needed': True,
            'total_volume': total_volume,
            'min_order': min_order,
            'utilization': total_volume / min_order * 100,
            'sku_orders': sku_orders,
            'order_date': datetime.now().strftime('%Y-%m-%d'),
            'delivery_date': (datetime.now() + timedelta(days=57)).strftime('%Y-%m-%d')
        }

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–∞—à –ø—Ä–∏–º–µ—Ä)
    test_data = [
        {'code': '30001', 'stock': 385, 'consumption': 1, 'diopter': -0.5},
        {'code': '30002', 'stock': 154, 'consumption': 1, 'diopter': -0.75},
        {'code': '30003', 'stock': 103, 'consumption': 1, 'diopter': -1.00},
        {'code': '30004', 'stock': 80, 'consumption': 1, 'diopter': -1.25},
        {'code': '30005', 'stock': 5, 'consumption': 1, 'diopter': -1.50},
    ]
    
    optimizer = CategoryOrderOptimizer()
    result = optimizer.analyze_category_order(test_data)
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("=" * 60)
    
    if result['order_needed']:
        print(f"‚úÖ –ó–∞–∫–∞–∑ –ù–£–ñ–ï–ù")
        print(f"üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: {result['total_volume']} –µ–¥.")
        print(f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {result['order_date']}")
        print(f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {result['delivery_date']}")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {result['utilization']:.1f}%")
        
        print("\nüìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê:")
        for order in result['sku_orders']:
            print(f"  {order['product_code']} ({order['diopter']:+.2f}): {order['volume']} –µ–¥.")
            print(f"    –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {order['criticality']}")
            print(f"    –ü–æ–∫—Ä—ã—Ç–∏–µ: {order['coverage_days']:.1f} –¥–Ω–µ–π")
    else:
        print(f"‚ùå –ó–∞–∫–∞–∑ –ù–ï –ù–£–ñ–ï–ù")
        print(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")

if __name__ == "__main__":
    main() 