#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
"""

from order_calculator import calculate_order_timing, print_order_analysis
from product_rules import ProductRules

def test_critical_scenario():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π"""
    
    print("üö® –¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø")
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤")
    print()
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–∫–æ–¥, –æ—Å—Ç–∞—Ç–∫–∏, –¥–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –¥–∏–æ–ø—Ç—Ä–∏–∏)
    critical_data = [
        ('30001', 100, 5, -0.5),    # -0.5, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 20 –¥–Ω–µ–π
        ('30002', 50, 8, -0.75),    # -0.75, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 6.25 –¥–Ω–µ–π
        ('30003', 30, 10, -1.00),   # -1.00, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 3 –¥–Ω—è
        ('30004', 15, 12, -1.25),   # -1.25, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 1.25 –¥–Ω—è
        ('30005', 5, 15, -1.50),    # -1.50, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 0.33 –¥–Ω—è
    ]
    
    print("üìä –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
    print("–ö–æ–¥ SKU | –î–∏–æ–ø—Ç—Ä–∏–∏ | –û—Å—Ç–∞—Ç–∫–∏ | –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ/–¥–µ–Ω—å | –î–Ω–µ–π –¥–æ OoS")
    print("-" * 70)
    for code, stock, consumption, diopter in critical_data:
        days_until_oos = stock / consumption
        print(f"{code:8} | {diopter:8.2f} | {stock:7} | {consumption:16} | {days_until_oos:10.1f}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π SKU
    results = []
    for code, stock, consumption, diopter in critical_data:
        result = calculate_order_timing(code, stock, consumption, combined_delivery=False)
        if result:
            result['diopter'] = diopter
            results.append(result)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –∑–∞–∫–∞–∑–∞
    order_groups = {}
    for result in results:
        order_date = result['order_date']
        if order_date not in order_groups:
            order_groups[order_date] = []
        order_groups[order_date].append(result)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –¥–∞—Ç–µ
    sorted_dates = sorted(order_groups.keys())
    
    print("üìÖ –ü–õ–ê–ù –ó–ê–ö–ê–ó–û–í –ü–û –î–ê–¢–ê–ú:")
    print("=" * 80)
    
    total_orders = 0
    for order_date in sorted_dates:
        skus = order_groups[order_date]
        print(f"\nüìÖ –î–ê–¢–ê –ó–ê–ö–ê–ó–ê: {order_date}")
        print("-" * 40)
        
        group_total = 0
        for sku in skus:
            if sku['should_create_order']:
                print(f"  ‚úÖ {sku['product_code']} ({sku['diopter']:+.2f}) - {sku['final_order']} –µ–¥.")
                group_total += sku['final_order']
            else:
                print(f"  ‚ùå {sku['product_code']} ({sku['diopter']:+.2f}) - –∑–∞–∫–∞–∑ –Ω–µ –Ω—É–∂–µ–Ω")
        
        if group_total > 0:
            print(f"  üì¶ –ò–¢–û–ì–û –í –ì–†–£–ü–ü–ï: {group_total} –µ–¥.")
            total_orders += group_total
        else:
            print(f"  üì¶ –ò–¢–û–ì–û –í –ì–†–£–ü–ü–ï: –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
    
    print("\n" + "=" * 80)
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –í—Å–µ–≥–æ –≥—Ä—É–ø–ø –∑–∞–∫–∞–∑–æ–≤: {len([d for d in sorted_dates if any(s['should_create_order'] for s in order_groups[d])])}")
    print(f"  –û–±—â–∏–π –æ–±—ä–µ–º –∑–∞–∫–∞–∑–æ–≤: {total_orders} –µ–¥.")
    
    return results, order_groups

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    results, order_groups = test_critical_scenario()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU
    print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û SKU:")
    print("=" * 80)
    
    for result in results:
        print(f"\nüìã {result['product_code']} ({result['diopter']:+.2f}):")
        print(f"  –û—Å—Ç–∞—Ç–∫–æ–≤: {result['current_stock']} –µ–¥.")
        print(f"  –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {result['daily_consumption']} –µ–¥./–¥–µ–Ω—å")
        print(f"  –î–Ω–µ–π –¥–æ OoS: {result['days_until_oos']}")
        print(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑: {result['recommended_order']} –µ–¥.")
        print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: {result['final_order']} –µ–¥.")
        print(f"  –ù—É–∂–µ–Ω –∑–∞–∫–∞–∑: {'‚úÖ –î–ê' if result['should_create_order'] else '‚ùå –ù–ï–¢'}")
        print(f"  –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {result['order_date']}")
        print(f"  –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {result['delivery_date']}")

if __name__ == "__main__":
    main() 