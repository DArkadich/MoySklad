#!/usr/bin/env python3
"""
API –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ —Å ML-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from fastapi import FastAPI, HTTPException, BackgroundTasks
from pydantic import BaseModel, Field
import json

from intelligent_order_optimizer import IntelligentOrderOptimizer
from ml_integration import MLServiceIntegration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Intelligent Order Optimizer API", 
    description="API –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class SKUData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ SKU –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    code: str = Field(..., description="–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞")
    stock: float = Field(..., description="–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫")
    consumption: float = Field(..., description="–î–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ")
    diopter: Optional[float] = Field(None, description="–î–∏–æ–ø—Ç—Ä–∏—è")
    price: Optional[float] = Field(None, description="–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞")
    category: Optional[str] = Field(None, description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞")

class HistoricalData(BaseModel):
    """–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    product_code: str = Field(..., description="–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞")
    consumption_history: List[float] = Field(..., description="–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è")
    dates: Optional[List[str]] = Field(None, description="–î–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π")

class IntelligentOrderRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞–∫–∞–∑–∞"""
    sku_data: List[SKUData] = Field(..., description="–î–∞–Ω–Ω—ã–µ SKU –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    historical_data: Optional[List[HistoricalData]] = Field(None, description="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML")
    min_order_volume: Optional[int] = Field(None, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∑–∞–∫–∞–∑–∞")
    delivery_optimization: bool = Field(True, description="–í–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏")
    ml_forecasting: bool = Field(True, description="–í–∫–ª—é—á–∏—Ç—å ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
    forecast_days: int = Field(30, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")

class SKUOrder(BaseModel):
    """–ó–∞–∫–∞–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SKU"""
    product_code: str
    diopter: Optional[float]
    volume: int
    days_until_oos: int
    new_oos_date: int
    criticality: str
    coverage_days: float
    ml_forecast: Optional[Dict[str, Any]]

class DeliveryOptimization(BaseModel):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    can_combine: bool
    savings_days: int
    combined_products: List[str]
    separate_products: List[str]

class MLInsights(BaseModel):
    """ML-–∏–Ω—Å–∞–π—Ç—ã"""
    trends: Dict[str, List[str]]
    seasonality_impact: Dict[str, List[str]]
    confidence_levels: Dict[str, List[str]]
    recommendations: List[str]

class IntelligentOrderResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    order_needed: bool
    total_volume: int
    min_order: int
    utilization: float
    sku_orders: List[SKUOrder]
    order_date: str
    delivery_date: str
    delivery_optimization: Optional[DeliveryOptimization]
    ml_insights: Optional[MLInsights]
    processing_time: float
    model_version: str = "2.0.0"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
optimizer = None
ml_service = None

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global optimizer, ml_service
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Intelligent Order Optimizer API")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    optimizer = IntelligentOrderOptimizer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ML-—Å–µ—Ä–≤–∏—Å–∞
    try:
        async with MLServiceIntegration() as ml:
            health = await ml.check_ml_service_health()
            logger.info(f"ML-—Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {health}")
    except Exception as e:
        logger.warning(f"ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "Intelligent Order Optimizer API",
        "version": "2.0.0",
        "description": "API –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
        "endpoints": {
            "/optimize": "POST - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞",
            "/health": "GET - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞",
            "/ml-status": "GET - –°—Ç–∞—Ç—É—Å ML-—Å–µ—Ä–≤–∏—Å–∞",
            "/batch-optimize": "POST - Batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤"
        }
    }

@app.post("/optimize", response_model=IntelligentOrderResponse)
async def optimize_order(request: IntelligentOrderRequest):
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞"""
    start_time = datetime.now()
    
    try:
        logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞–∫–∞–∑–∞ –¥–ª—è {len(request.sku_data)} SKU")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sku_data = [sku.dict() for sku in request.sku_data]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        historical_data = None
        if request.historical_data and request.ml_forecasting:
            historical_data = {
                hist.product_code: hist.consumption_history 
                for hist in request.historical_data
            }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        result = await optimizer.analyze_intelligent_order(sku_data, historical_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_time = (datetime.now() - start_time).total_seconds()
        result['processing_time'] = processing_time
        
        logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f} —Å–µ–∫")
        
        return IntelligentOrderResponse(**result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")

@app.post("/batch-optimize")
async def batch_optimize_orders(requests: List[IntelligentOrderRequest]):
    """Batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    start_time = datetime.now()
    
    try:
        logger.info(f"üìä Batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è {len(requests)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        results = []
        for i, request in enumerate(requests):
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i+1}/{len(requests)}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            sku_data = [sku.dict() for sku in request.sku_data]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            historical_data = None
            if request.historical_data and request.ml_forecasting:
                historical_data = {
                    hist.product_code: hist.consumption_history 
                    for hist in request.historical_data
                }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            result = await optimizer.analyze_intelligent_order(sku_data, historical_data)
            results.append(result)
        
        processing_time = (datetime.now() - start_time).total_seconds()
        
        return {
            "results": results,
            "total_requests": len(requests),
            "processing_time": processing_time,
            "average_time": processing_time / len(requests)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML-—Å–µ—Ä–≤–∏—Å
        ml_health = False
        try:
            async with MLServiceIntegration() as ml:
                ml_health = await ml.check_ml_service_health()
        except Exception as e:
            logger.warning(f"ML-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "ml_service": "healthy" if ml_health else "unavailable",
            "optimizer": "ready"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        raise HTTPException(status_code=500, detail="Service unhealthy")

@app.get("/ml-status")
async def ml_status():
    """–°—Ç–∞—Ç—É—Å ML-—Å–µ—Ä–≤–∏—Å–∞"""
    try:
        async with MLServiceIntegration() as ml:
            health = await ml.check_ml_service_health()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
            model_performance = {}
            if health:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö
                pass
            
            return {
                "ml_service_available": health,
                "model_performance": model_performance,
                "last_check": datetime.now().isoformat()
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ML-—Å—Ç–∞—Ç—É—Å–∞: {e}")
        return {
            "ml_service_available": False,
            "error": str(e),
            "last_check": datetime.now().isoformat()
        }

@app.get("/optimizer/features")
async def get_optimizer_features():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    return {
        "features": [
            "ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞",
            "–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏",
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏",
            "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤",
            "–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏",
            "–£—á–µ—Ç –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤",
            "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤",
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML-–∏–Ω—Å–∞–π—Ç–æ–≤"
        ],
        "supported_product_types": [
            "daily_lenses",
            "monthly_lenses_6", 
            "monthly_lenses_3",
            "solution_360",
            "solution_500",
            "solution_120"
        ],
        "ml_models": [
            "linear_regression",
            "random_forest", 
            "sarima",
            "ensemble"
        ]
    }

@app.post("/optimizer/test")
async def test_optimizer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = [
            SKUData(code='30001', stock=385, consumption=1, diopter=-0.5),
            SKUData(code='30002', stock=154, consumption=1, diopter=-0.75),
            SKUData(code='30003', stock=103, consumption=1, diopter=-1.00),
            SKUData(code='30004', stock=80, consumption=1, diopter=-1.25),
            SKUData(code='30005', stock=5, consumption=1, diopter=-1.50),
        ]
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        historical_data = [
            HistoricalData(
                product_code='30001',
                consumption_history=[1.2, 1.1, 1.3, 1.0, 1.2, 1.4, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.4, 1.1]
            ),
            HistoricalData(
                product_code='30002', 
                consumption_history=[0.8, 0.9, 1.0, 0.8, 0.9, 1.1, 0.8, 0.9, 1.0, 0.8, 0.9, 1.1, 0.8, 0.9]
            ),
            HistoricalData(
                product_code='30003',
                consumption_history=[1.0, 1.1, 1.0, 1.2, 1.0, 1.1, 1.0, 1.2, 1.0, 1.1, 1.0, 1.2, 1.0, 1.1]
            ),
            HistoricalData(
                product_code='30004',
                consumption_history=[0.7, 0.8, 0.7, 0.9, 0.7, 0.8, 0.7, 0.9, 0.7, 0.8, 0.7, 0.9, 0.7, 0.8]
            ),
            HistoricalData(
                product_code='30005',
                consumption_history=[0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6]
            ),
        ]
        
        request = IntelligentOrderRequest(
            sku_data=test_data,
            historical_data=historical_data,
            ml_forecasting=True,
            delivery_optimization=True
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        result = await optimize_order(request)
        
        return {
            "test_result": result,
            "message": "–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 