#!/usr/bin/env python3
"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
"""

from product_rules import ProductRules
from datetime import datetime, timedelta

def calculate_order_timing(product_code: str, current_stock: float, daily_consumption: float, combined_delivery: bool = False):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"""
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ OoS
    days_until_oos = int(current_stock / daily_consumption) if daily_consumption > 0 else 999
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ–≤–∞—Ä–∞
    rules = ProductRules.get_product_rules(product_code)
    if not rules:
        print(f"‚ùå –¢–æ–≤–∞—Ä {product_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏
    total_lead_time = ProductRules.get_total_lead_time(product_code, combined_delivery)
    safety_stock_days = rules['safety_stock_days']
    critical_days = total_lead_time + safety_stock_days
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
    days_until_order = days_until_oos - critical_days
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑
    required_stock = ProductRules.calculate_required_stock(product_code, daily_consumption, combined_delivery)
    recommended_order = max(0, required_stock - current_stock)
    final_order = ProductRules.apply_order_constraints(product_code, recommended_order)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑
    should_create = ProductRules.should_create_order(product_code, days_until_oos, recommended_order, combined_delivery)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
    today = datetime.now()
    order_date = today + timedelta(days=max(0, days_until_order))
    delivery_date = order_date + timedelta(days=total_lead_time)
    
    return {
        'product_code': product_code,
        'product_description': rules['description'],
        'current_stock': current_stock,
        'daily_consumption': daily_consumption,
        'days_until_oos': days_until_oos,
        'production_days': rules.get('production_days', 45),
        'delivery_days': rules.get('delivery_days', 12),
        'total_lead_time': total_lead_time,
        'safety_stock_days': safety_stock_days,
        'critical_days': critical_days,
        'days_until_order': days_until_order,
        'should_create_order': should_create,
        'recommended_order': recommended_order,
        'final_order': final_order,
        'order_date': order_date.strftime('%Y-%m-%d'),
        'delivery_date': delivery_date.strftime('%Y-%m-%d'),
        'combined_delivery': combined_delivery
    }

def print_order_analysis(result):
    """–í—ã–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞"""
    if not result:
        return
    
    print("=" * 60)
    print(f"–ê–ù–ê–õ–ò–ó –ó–ê–ö–ê–ó–ê: {result['product_code']} - {result['product_description']}")
    print("=" * 60)
    print(f"üì¶ –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: {result['current_stock']:.1f} –µ–¥.")
    print(f"üìä –î–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {result['daily_consumption']:.2f} –µ–¥./–¥–µ–Ω—å")
    print(f"‚è∞ –û—Å—Ç–∞—Ç–∫–æ–≤ —Ö–≤–∞—Ç–∏—Ç –Ω–∞: {result['days_until_oos']} –¥–Ω–µ–π")
    print()
    
    print("üè≠ –°–†–û–ö–ò –ü–û–°–¢–ê–í–ö–ò:")
    print(f"  –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {result['production_days']} –¥–Ω–µ–π")
    print(f"  –î–æ—Å—Ç–∞–≤–∫–∞: {result['delivery_days']} –¥–Ω–µ–π")
    print(f"  –û–±—â–∏–π —Å—Ä–æ–∫: {result['total_lead_time']} –¥–Ω–µ–π")
    print(f"  –°—Ç—Ä–∞—Ö–æ–≤–æ–π –∑–∞–ø–∞—Å: {result['safety_stock_days']} –¥–Ω–µ–π")
    print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥: {result['critical_days']} –¥–Ω–µ–π")
    print()
    
    print("üìÖ –†–ê–°–ß–ï–¢ –î–ê–¢–´ –ó–ê–ö–ê–ó–ê:")
    if result['days_until_order'] > 0:
        print(f"  ‚úÖ –ó–∞–∫–∞–∑ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑: {result['days_until_order']} –¥–Ω–µ–π")
        print(f"  üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {result['order_date']}")
        print(f"  üì¶ –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {result['delivery_date']}")
    elif result['days_until_order'] == 0:
        print(f"  ‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –°–ï–ì–û–î–ù–Ø")
        print(f"  üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {result['order_date']}")
        print(f"  üì¶ –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {result['delivery_date']}")
    else:
        print(f"  ‚ùå –£–ñ–ï –ü–û–ó–î–ù–û! –ó–∞–∫–∞–∑ –Ω—É–∂–Ω–æ –±—ã–ª–æ —Å–¥–µ–ª–∞—Ç—å {abs(result['days_until_order'])} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
        print(f"  üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {result['order_date']}")
        print(f"  üì¶ –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {result['delivery_date']}")
    print()
    
    print("üõí –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –ó–ê–ö–ê–ó:")
    print(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä–µ–º: {result['recommended_order']:.1f} –µ–¥.")
    print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: {result['final_order']} –µ–¥.")
    print(f"  –ù—É–∂–µ–Ω –∑–∞–∫–∞–∑: {'‚úÖ –î–ê' if result['should_create_order'] else '‚ùå –ù–ï–¢'}")
    print()
    
    if result['combined_delivery']:
        print("üöö –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –î–û–°–¢–ê–í–ö–ê:")
        print(f"  –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ª–∏–Ω–∑ = 0")
        print(f"  –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–µ")
    else:
        print("üöö –û–¢–î–ï–õ–¨–ù–ê–Ø –î–û–°–¢–ê–í–ö–ê")
    print("=" * 60)

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        # (–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞, –æ—Å—Ç–∞—Ç–∫–∏, –¥–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)
        ('30001', 8000, 100, False),  # –õ–∏–Ω–∑—ã, –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞
        ('30001', 8000, 100, True),   # –õ–∏–Ω–∑—ã, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞
        ('360360', 5000, 50, False),  # –†–∞—Å—Ç–≤–æ—Ä—ã, –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞
        ('360360', 5000, 50, True),   # –†–∞—Å—Ç–≤–æ—Ä—ã, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞
    ]
    
    print("üßÆ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –î–ê–¢–´ –ó–ê–ö–ê–ó–ê")
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
    print()
    
    for product_code, stock, consumption, combined in test_cases:
        result = calculate_order_timing(product_code, stock, consumption, combined)
        print_order_analysis(result)
        print()

if __name__ == "__main__":
    main() 