#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö SKU –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–Ω–∑
"""

from order_calculator import calculate_order_timing, print_order_analysis
from product_rules import ProductRules
from datetime import datetime, timedelta

def analyze_multiple_sku_order():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö SKU –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–Ω–∑"""
    
    print("üßÆ –ê–ù–ê–õ–ò–ó –ó–ê–ö–ê–ó–ê –ù–ï–°–ö–û–õ–¨–ö–ò–• SKU –û–î–ù–û–î–ù–ï–í–ù–´–• –õ–ò–ù–ó")
    print("–°—Ü–µ–Ω–∞—Ä–∏–π: —Ä–∞–∑–Ω—ã–µ –¥–∏–æ–ø—Ç—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏")
    print()
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ SKU (–∫–æ–¥, –æ—Å—Ç–∞—Ç–∫–∏, –¥–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –¥–∏–æ–ø—Ç—Ä–∏–∏)
    sku_data = [
        ('30001', 385, 1, -0.5),   # -0.5, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 385 –¥–Ω–µ–π
        ('30002', 154, 1, -0.75),  # -0.75, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 154 –¥–Ω—è
        ('30003', 103, 1, -1.00),  # -1.00, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 103 –¥–Ω—è
        ('30004', 80, 1, -1.25),   # -1.25, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 80 –¥–Ω–µ–π
        ('30005', 5, 1, -1.50),    # -1.50, –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ 5 –¥–Ω–µ–π
    ]
    
    print("üìä –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
    print("–ö–æ–¥ SKU | –î–∏–æ–ø—Ç—Ä–∏–∏ | –û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ –¥–Ω–µ–π | –î–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ")
    print("-" * 60)
    for code, days, consumption, diopter in sku_data:
        print(f"{code:8} | {diopter:8.2f} | {days:14} | {consumption:18}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π SKU
    results = []
    for code, days, consumption, diopter in sku_data:
        current_stock = days * consumption
        result = calculate_order_timing(code, current_stock, consumption, combined_delivery=False)
        if result:
            result['diopter'] = diopter
            results.append(result)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –∑–∞–∫–∞–∑–∞
    order_groups = {}
    for result in results:
        order_date = result['order_date']
        if order_date not in order_groups:
            order_groups[order_date] = []
        order_groups[order_date].append(result)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –¥–∞—Ç–µ
    sorted_dates = sorted(order_groups.keys())
    
    print("üìÖ –ü–õ–ê–ù –ó–ê–ö–ê–ó–û–í –ü–û –î–ê–¢–ê–ú:")
    print("=" * 80)
    
    total_orders = 0
    for order_date in sorted_dates:
        skus = order_groups[order_date]
        print(f"\nüìÖ –î–ê–¢–ê –ó–ê–ö–ê–ó–ê: {order_date}")
        print("-" * 40)
        
        group_total = 0
        for sku in skus:
            if sku['should_create_order']:
                print(f"  ‚úÖ {sku['product_code']} ({sku['diopter']:+.2f}) - {sku['final_order']} –µ–¥.")
                group_total += sku['final_order']
            else:
                print(f"  ‚ùå {sku['product_code']} ({sku['diopter']:+.2f}) - –∑–∞–∫–∞–∑ –Ω–µ –Ω—É–∂–µ–Ω")
        
        if group_total > 0:
            print(f"  üì¶ –ò–¢–û–ì–û –í –ì–†–£–ü–ü–ï: {group_total} –µ–¥.")
            total_orders += group_total
        else:
            print(f"  üì¶ –ò–¢–û–ì–û –í –ì–†–£–ü–ü–ï: –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
    
    print("\n" + "=" * 80)
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –í—Å–µ–≥–æ –≥—Ä—É–ø–ø –∑–∞–∫–∞–∑–æ–≤: {len([d for d in sorted_dates if any(s['should_create_order'] for s in order_groups[d])])}")
    print(f"  –û–±—â–∏–π –æ–±—ä–µ–º –∑–∞–∫–∞–∑–æ–≤: {total_orders} –µ–¥.")
    
    # –ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    print(f"\nüöö –ê–ù–ê–õ–ò–ó –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –î–û–°–¢–ê–í–ö–ò:")
    product_codes = [r['product_code'] for r in results if r['should_create_order']]
    if product_codes:
        optimization = ProductRules.get_delivery_optimization(product_codes)
        print(f"  –ú–æ–∂–µ—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É: {optimization['can_combine_delivery']}")
        print(f"  –õ–∏–Ω–∑ –≤ –∑–∞–∫–∞–∑–µ: {optimization['lenses_count']}")
        print(f"  –†–∞—Å—Ç–≤–æ—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: {optimization['solutions_count']}")
        print(f"  –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–µ: {optimization['delivery_savings_days']} –¥–Ω–µ–π")
    else:
        print("  –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    return results, order_groups

def analyze_combined_delivery_scenario(results):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π"""
    
    print("\n" + "=" * 80)
    print("üöö –ê–ù–ê–õ–ò–ó –° –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ô –î–û–°–¢–ê–í–ö–û–ô")
    print("–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –µ—Å—Ç—å —Ä–∞—Å—Ç–≤–æ—Ä—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫")
    print("=" * 80)
    
    # –¢–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π
    sku_data = [
        ('30001', 385, 1, -0.5),
        ('30002', 154, 1, -0.75),
        ('30003', 103, 1, -1.00),
        ('30004', 80, 1, -1.25),
        ('30005', 5, 1, -1.50),
    ]
    
    results_combined = []
    for code, days, consumption, diopter in sku_data:
        current_stock = days * consumption
        result = calculate_order_timing(code, current_stock, consumption, combined_delivery=True)
        if result:
            result['diopter'] = diopter
            results_combined.append(result)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –∑–∞–∫–∞–∑–∞
    order_groups_combined = {}
    for result in results_combined:
        order_date = result['order_date']
        if order_date not in order_groups_combined:
            order_groups_combined[order_date] = []
        order_groups_combined[order_date].append(result)
    
    sorted_dates_combined = sorted(order_groups_combined.keys())
    
    print("\nüìÖ –ü–õ–ê–ù –ó–ê–ö–ê–ó–û–í –° –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ô –î–û–°–¢–ê–í–ö–û–ô:")
    print("-" * 60)
    
    total_orders_combined = 0
    for order_date in sorted_dates_combined:
        skus = order_groups_combined[order_date]
        print(f"\nüìÖ –î–ê–¢–ê –ó–ê–ö–ê–ó–ê: {order_date}")
        print("-" * 30)
        
        group_total = 0
        for sku in skus:
            if sku['should_create_order']:
                print(f"  ‚úÖ {sku['product_code']} ({sku['diopter']:+.2f}) - {sku['final_order']} –µ–¥.")
                group_total += sku['final_order']
            else:
                print(f"  ‚ùå {sku['product_code']} ({sku['diopter']:+.2f}) - –∑–∞–∫–∞–∑ –Ω–µ –Ω—É–∂–µ–Ω")
        
        if group_total > 0:
            print(f"  üì¶ –ò–¢–û–ì–û –í –ì–†–£–ü–ü–ï: {group_total} –µ–¥.")
            total_orders_combined += group_total
        else:
            print(f"  üì¶ –ò–¢–û–ì–û –í –ì–†–£–ü–ü–ï: –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
    
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô:")
    print(f"  –û—Ç–¥–µ–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {sum(1 for r in results if r['should_create_order'])} SKU")
    print(f"  –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {sum(1 for r in results_combined if r['should_create_order'])} SKU")
    print(f"  –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–µ: –¥–æ 60%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    results, order_groups = analyze_multiple_sku_order()
    analyze_combined_delivery_scenario(results)

if __name__ == "__main__":
    main() 