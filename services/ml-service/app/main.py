"""
Horiens ML Service
–°–µ—Ä–≤–∏—Å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import pickle
import os

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
import uvicorn

from app.core.config import settings
from app.core.database import get_database
from app.core.redis_client import get_redis_client
from app.services.ml_models import MLModelService
from app.services.data_processor import DataProcessor
from app.services.feature_engineering import FeatureEngineer
from app.utils.logging_config import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Horiens ML Service",
    description="–°–µ—Ä–≤–∏—Å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
ml_service = MLModelService()
data_processor = DataProcessor()
feature_engineer = FeatureEngineer()


class ForecastRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    product_id: str = Field(..., description="ID –ø—Ä–æ–¥—É–∫—Ç–∞")
    forecast_days: int = Field(30, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
    model_type: Optional[str] = Field(None, description="–¢–∏–ø –º–æ–¥–µ–ª–∏ (linear/rf/sarima/ensemble)")


class ForecastResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º"""
    product_id: str = Field(..., description="ID –ø—Ä–æ–¥—É–∫—Ç–∞")
    daily_demand: float = Field(..., description="–°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å")
    weekly_demand: float = Field(..., description="–°—Ä–µ–¥–Ω–∏–π –Ω–µ–¥–µ–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å")
    monthly_demand: float = Field(..., description="–°—Ä–µ–¥–Ω–∏–π –º–µ—Å—è—á–Ω—ã–π —Å–ø—Ä–æ—Å")
    accuracy: float = Field(..., description="–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (0-1)")
    confidence_interval: Dict[str, float] = Field(..., description="–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
    seasonality_factor: Optional[float] = Field(None, description="–§–∞–∫—Ç–æ—Ä —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
    trend_factor: Optional[float] = Field(None, description="–§–∞–∫—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞")
    model_type: str = Field(..., description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
    features_used: List[str] = Field(..., description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
    last_updated: datetime = Field(..., description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")


class ModelTrainingRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    product_id: str = Field(..., description="ID –ø—Ä–æ–¥—É–∫—Ç–∞")
    model_type: str = Field(..., description="–¢–∏–ø –º–æ–¥–µ–ª–∏")
    force_retrain: bool = Field(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")


class ModelTrainingResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    product_id: str = Field(..., description="ID –ø—Ä–æ–¥—É–∫—Ç–∞")
    model_type: str = Field(..., description="–¢–∏–ø –º–æ–¥–µ–ª–∏")
    accuracy: float = Field(..., description="–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
    training_time: float = Field(..., description="–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    features_count: int = Field(..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è")


class ModelPerformance(BaseModel):
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏"""
    product_id: str = Field(..., description="ID –ø—Ä–æ–¥—É–∫—Ç–∞")
    model_type: str = Field(..., description="–¢–∏–ø –º–æ–¥–µ–ª–∏")
    accuracy: float = Field(..., description="–¢–æ—á–Ω–æ—Å—Ç—å")
    mae: float = Field(..., description="–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    rmse: float = Field(..., description="–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞")
    r2_score: float = Field(..., description="R¬≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç")
    last_evaluation: datetime = Field(..., description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏")


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Horiens ML Service")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    try:
        db = get_database()
        await db.connect()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    
    try:
        redis_client = get_redis_client()
        await redis_client.ping()
        logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")


@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Horiens ML Service")


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "ml-service",
        "timestamp": datetime.now().isoformat(),
        "models_loaded": len(ml_service.loaded_models)
    }


@app.post("/forecast", response_model=ForecastResponse)
async def get_forecast(request: ForecastRequest):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        historical_data = await data_processor.get_historical_data(
            request.product_id, 
            days_back=90
        )
        
        if not historical_data:
            raise HTTPException(
                status_code=404, 
                detail=f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {request.product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features = await feature_engineer.create_features(historical_data)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast = await ml_service.get_forecast(
            product_id=request.product_id,
            features=features,
            forecast_days=request.forecast_days,
            model_type=request.model_type
        )
        
        return ForecastResponse(
            product_id=request.product_id,
            daily_demand=forecast["daily_demand"],
            weekly_demand=forecast["weekly_demand"],
            monthly_demand=forecast["monthly_demand"],
            accuracy=forecast["accuracy"],
            confidence_interval=forecast["confidence_interval"],
            seasonality_factor=forecast.get("seasonality_factor"),
            trend_factor=forecast.get("trend_factor"),
            model_type=forecast["model_type"],
            features_used=forecast["features_used"],
            last_updated=datetime.now()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {request.product_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/train", response_model=ModelTrainingResponse)
async def train_model(request: ModelTrainingRequest, background_tasks: BackgroundTasks):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        training_data = await data_processor.get_training_data(
            request.product_id,
            days_back=180
        )
        
        if not training_data:
            raise HTTPException(
                status_code=404,
                detail=f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {request.product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        training_result = await ml_service.train_model(
            product_id=request.product_id,
            training_data=training_data,
            model_type=request.model_type,
            force_retrain=request.force_retrain
        )
        
        return ModelTrainingResponse(
            product_id=request.product_id,
            model_type=request.model_type,
            accuracy=training_result["accuracy"],
            training_time=training_result["training_time"],
            features_count=training_result["features_count"],
            status="completed"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è {request.product_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/retrain-all")
async def retrain_all_models(background_tasks: BackgroundTasks):
    """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        background_tasks.add_task(ml_service.retrain_all_models)
        return {
            "message": "–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/models/{product_id}/performance", response_model=List[ModelPerformance])
async def get_model_performance(product_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        performance = await ml_service.get_model_performance(product_id)
        return performance
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è {product_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/models/status")
async def get_models_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        status = await ml_service.get_models_status()
        return status
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/models/{product_id}/evaluate")
async def evaluate_model(product_id: str, model_type: str):
    """–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
    try:
        evaluation = await ml_service.evaluate_model(product_id, model_type)
        return evaluation
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ {model_type} –¥–ª—è {product_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/analytics/seasonality/{product_id}")
async def get_seasonality_analysis(product_id: str):
    """–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        seasonality = await ml_service.get_seasonality_analysis(product_id)
        return seasonality
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è {product_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/analytics/trends/{product_id}")
async def get_trend_analysis(product_id: str):
    """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        trends = await ml_service.get_trend_analysis(product_id)
        return trends
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è {product_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/data/update")
async def update_training_data(background_tasks: BackgroundTasks):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    try:
        background_tasks.add_task(data_processor.update_all_data)
        return {
            "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8002,
        reload=True,
        log_level="info"
    ) 