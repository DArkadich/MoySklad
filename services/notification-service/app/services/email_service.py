import smtplib
import logging
from typing import List, Optional, Dict
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

from app.core.config import settings

logger = logging.getLogger(__name__)

class EmailService:
    def __init__(self):
        self.smtp_server = settings.smtp_server
        self.smtp_port = settings.smtp_port
        self.smtp_username = settings.smtp_username
        self.smtp_password = settings.smtp_password
        self.sender_email = settings.sender_email
        self.sender_name = settings.sender_name
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
            await self.test_connection()
            logger.info("Email —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Email —Å–µ—Ä–≤–∏—Å–∞: {e}")
            raise
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("Email —Å–µ—Ä–≤–∏—Å –∑–∞–∫—Ä—ã—Ç")
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                logger.info("SMTP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return False
    
    async def send_email(self, subject: str, message: str, recipients: List[str], 
                        html_content: str = None, attachments: List[Dict] = None) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email"""
        try:
            msg = MIMEMultipart()
            msg['From'] = f"{self.sender_name} <{self.sender_email}>"
            msg['To'] = ", ".join(recipients)
            msg['Subject'] = subject
            
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            text_part = MIMEText(message, 'plain', 'utf-8')
            msg.attach(text_part)
            
            # HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if html_content:
                html_part = MIMEText(html_content, 'html', 'utf-8')
                msg.attach(html_part)
            
            # –í–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if attachments:
                for attachment in attachments:
                    filename = attachment.get('filename', 'attachment')
                    content = attachment.get('content', b'')
                    content_type = attachment.get('content_type', 'application/octet-stream')
                    
                    part = MIMEBase('application', 'octet-stream')
                    part.set_payload(content)
                    encoders.encode_base64(part)
                    part.add_header('Content-Disposition', f'attachment; filename= {filename}')
                    msg.attach(part)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                text = msg.as_string()
                server.sendmail(self.sender_email, recipients, text)
            
            return {
                "status": "success",
                "recipients": recipients,
                "subject": subject,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return {
                "status": "error",
                "error": str(e),
                "recipients": recipients,
                "timestamp": datetime.now().isoformat()
            }
    
    async def send_purchase_alert_email(self, alert_data: Dict) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å –∞–ª–µ—Ä—Ç–æ–º –∑–∞–∫—É–ø–∫–∏"""
        try:
            product_name = alert_data.get("product_name", "")
            quantity = alert_data.get("quantity", 0)
            urgency = alert_data.get("urgency", "normal")
            
            subject = f"üö® –ê–ª–µ—Ä—Ç –∑–∞–∫—É–ø–∫–∏: {product_name}"
            
            message = f"""
–ê–ª–µ—Ä—Ç –∑–∞–∫—É–ø–∫–∏

–¢–æ–≤–∞—Ä: {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}
–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã Horiens Purchase Agent.
            """
            
            html_content = f"""
            <html>
            <body>
                <h2>üö® –ê–ª–µ—Ä—Ç –∑–∞–∫—É–ø–∫–∏</h2>
                <p><strong>–¢–æ–≤–∞—Ä:</strong> {product_name}</p>
                <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> {quantity}</p>
                <p><strong>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</strong> {urgency}</p>
                <p><strong>–í—Ä–µ–º—è:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <hr>
                <p><em>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã Horiens Purchase Agent.</em></p>
            </body>
            </html>
            """
            
            return await self.send_email(
                subject=subject,
                message=message,
                recipients=[settings.admin_email],
                html_content=html_content
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∞–ª–µ—Ä—Ç–∞ –∑–∞–∫—É–ø–∫–∏: {e}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    async def send_stock_alert_email(self, alert_data: Dict) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å –∞–ª–µ—Ä—Ç–æ–º —Å–∫–ª–∞–¥–∞"""
        try:
            product_name = alert_data.get("product_name", "")
            current_stock = alert_data.get("current_stock", 0)
            min_stock = alert_data.get("min_stock", 0)
            
            subject = f"üì¶ –ê–ª–µ—Ä—Ç —Å–∫–ª–∞–¥–∞: {product_name}"
            
            message = f"""
–ê–ª–µ—Ä—Ç —Å–∫–ª–∞–¥–∞

–¢–æ–≤–∞—Ä: {product_name}
–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {current_stock}
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {min_stock}
–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã Horiens Purchase Agent.
            """
            
            html_content = f"""
            <html>
            <body>
                <h2>üì¶ –ê–ª–µ—Ä—Ç —Å–∫–ª–∞–¥–∞</h2>
                <p><strong>–¢–æ–≤–∞—Ä:</strong> {product_name}</p>
                <p><strong>–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:</strong> {current_stock}</p>
                <p><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫:</strong> {min_stock}</p>
                <p><strong>–í—Ä–µ–º—è:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <hr>
                <p><em>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã Horiens Purchase Agent.</em></p>
            </body>
            </html>
            """
            
            return await self.send_email(
                subject=subject,
                message=message,
                recipients=[settings.admin_email],
                html_content=html_content
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∞–ª–µ—Ä—Ç–∞ —Å–∫–ª–∞–¥–∞: {e}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    async def send_weekly_report_email(self, report_data: Dict) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ email"""
        try:
            subject = "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç Horiens Purchase Agent"
            
            message = f"""
–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

–ü–µ—Ä–∏–æ–¥: {report_data.get('period', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–í—Å–µ–≥–æ –∑–∞–∫—É–ø–æ–∫: {report_data.get('total_purchases', 0)}
–û–±—â–∞—è —Å—É–º–º–∞: {report_data.get('total_amount', 0)}
–ê–ª–µ—Ä—Ç–æ–≤: {report_data.get('total_alerts', 0)}

–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã Horiens Purchase Agent.
            """
            
            html_content = f"""
            <html>
            <body>
                <h2>üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</h2>
                <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> {report_data.get('period', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</p>
                <p><strong>–í—Å–µ–≥–æ –∑–∞–∫—É–ø–æ–∫:</strong> {report_data.get('total_purchases', 0)}</p>
                <p><strong>–û–±—â–∞—è —Å—É–º–º–∞:</strong> {report_data.get('total_amount', 0)}</p>
                <p><strong>–ê–ª–µ—Ä—Ç–æ–≤:</strong> {report_data.get('total_alerts', 0)}</p>
                <hr>
                <p><em>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã Horiens Purchase Agent.</em></p>
            </body>
            </html>
            """
            
            return await self.send_email(
                subject=subject,
                message=message,
                recipients=[settings.admin_email],
                html_content=html_content
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            } 