from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
import aio_pika
import asyncio
import logging
from typing import Dict, List, Optional
import json
from datetime import datetime
import httpx

from app.core.config import settings
from app.core.redis_client import get_redis_client, close_redis
from app.utils.logging_config import setup_logging, get_logger
from app.services.telegram_service import TelegramService
from app.services.email_service import EmailService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = get_logger(__name__)

app = FastAPI(
    title="Notification Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
telegram_service = TelegramService()
email_service = EmailService()

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("–ó–∞–ø—É—Å–∫ Notification Service...")
    await get_redis_client()
    await telegram_service.initialize()
    await email_service.initialize()

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Notification Service...")
    await close_redis()
    await telegram_service.close()
    await email_service.close()

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "notification-service",
        "timestamp": datetime.now().isoformat()
    }

@app.post("/api/v1/notifications/send")
async def send_notification(notification_data: Dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        notification_type = notification_data.get("type", "telegram")
        message = notification_data.get("message", "")
        recipients = notification_data.get("recipients", [])
        
        if notification_type == "telegram":
            result = await telegram_service.send_message(message, recipients)
        elif notification_type == "email":
            result = await email_service.send_email(message, recipients)
        else:
            raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        return {
            "status": "success",
            "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            "result": result
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/notifications/purchase-alert")
async def send_purchase_alert(alert_data: Dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—É–ø–∫–µ"""
    try:
        product_name = alert_data.get("product_name", "")
        quantity = alert_data.get("quantity", 0)
        urgency = alert_data.get("urgency", "normal")
        
        message = f"üö® –ê–õ–ï–†–¢ –ó–ê–ö–£–ü–ö–ò\n\n"
        message += f"–¢–æ–≤–∞—Ä: {product_name}\n"
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        message += f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}\n"
        message += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        result = await telegram_service.send_message(message)
        
        return {
            "status": "success",
            "message": "–ê–ª–µ—Ä—Ç –∑–∞–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            "result": result
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –∑–∞–∫—É–ø–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/notifications/stock-alert")
async def send_stock_alert(alert_data: Dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
    try:
        product_name = alert_data.get("product_name", "")
        current_stock = alert_data.get("current_stock", 0)
        min_stock = alert_data.get("min_stock", 0)
        
        message = f"üì¶ –ê–õ–ï–†–¢ –°–ö–õ–ê–î–ê\n\n"
        message += f"–¢–æ–≤–∞—Ä: {product_name}\n"
        message += f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {current_stock}\n"
        message += f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {min_stock}\n"
        message += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        result = await telegram_service.send_message(message)
        
        return {
            "status": "success",
            "message": "–ê–ª–µ—Ä—Ç —Å–∫–ª–∞–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            "result": result
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ —Å–∫–ª–∞–¥–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/notifications/forecast-alert")
async def send_forecast_alert(alert_data: Dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ"""
    try:
        product_name = alert_data.get("product_name", "")
        forecast_value = alert_data.get("forecast_value", 0)
        confidence = alert_data.get("confidence", 0)
        
        message = f"üìä –ü–†–û–ì–ù–û–ó –°–ü–†–û–°–ê\n\n"
        message += f"–¢–æ–≤–∞—Ä: {product_name}\n"
        message += f"–ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞: {forecast_value}\n"
        message += f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}\n"
        message += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        result = await telegram_service.send_message(message)
        
        return {
            "status": "success",
            "message": "–ê–ª–µ—Ä—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            "result": result
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/notifications/history")
async def get_notification_history(limit: int = 50):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        redis_client = await get_redis_client()
        history = []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ Redis
        keys = await redis_client.keys("notification:*")
        for key in keys[-limit:]:
            data = await redis_client.get(key)
            if data:
                history.append(json.loads(data))
        
        return {
            "status": "success",
            "data": history,
            "count": len(history)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/notifications/test")
async def test_notification():
    """–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        message = f"üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï\n\n"
        message += f"–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
        message += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        result = await telegram_service.send_message(message)
        
        return {
            "status": "success",
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            "result": result
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8004,
        reload=True
    ) 