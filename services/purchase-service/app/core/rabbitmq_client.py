"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RabbitMQ
"""

import aio_pika
import logging
import json
from typing import Optional, Dict, Any
from app.core.config import settings

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
_rabbitmq_connection: Optional[aio_pika.Connection] = None
_rabbitmq_channel: Optional[aio_pika.Channel] = None


async def get_rabbitmq_client() -> aio_pika.Channel:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ RabbitMQ"""
    global _rabbitmq_connection, _rabbitmq_channel
    
    if _rabbitmq_channel is None:
        try:
            _rabbitmq_connection = await aio_pika.connect_robust(
                settings.RABBITMQ_URL
            )
            _rabbitmq_channel = await _rabbitmq_connection.channel()
            
            # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π
            await _rabbitmq_channel.declare_queue("notifications", durable=True)
            await _rabbitmq_channel.declare_queue("purchase_events", durable=True)
            await _rabbitmq_channel.declare_queue("ml_tasks", durable=True)
            
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
            raise
    
    return _rabbitmq_channel


async def close_rabbitmq():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ"""
    global _rabbitmq_connection, _rabbitmq_channel
    
    if _rabbitmq_channel:
        await _rabbitmq_channel.close()
        _rabbitmq_channel = None
    
    if _rabbitmq_connection:
        await _rabbitmq_connection.close()
        _rabbitmq_connection = None
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ")


async def publish_message(queue: str, message: Dict[str, Any]) -> bool:
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
    try:
        channel = await get_rabbitmq_client()
        
        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        message_body = json.dumps(message, ensure_ascii=False).encode()
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
        await channel.default_exchange.publish(
            aio_pika.Message(
                body=message_body,
                delivery_mode=aio_pika.DeliveryMode.PERSISTENT
            ),
            routing_key=queue
        )
        
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å {queue}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {queue}: {e}")
        return False


async def consume_messages(queue: str, callback):
    """–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        channel = await get_rabbitmq_client()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_obj = await channel.declare_queue(queue, durable=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        async def message_handler(message):
            async with message.process():
                try:
                    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    body = message.body.decode()
                    data = json.loads(body)
                    
                    # –í—ã–∑–æ–≤ callback
                    await callback(data)
                    
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {queue}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {queue}: {e}")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        await queue_obj.consume(message_handler)
        logger.info(f"‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –¥–ª—è {queue}: {e}")


async def get_queue_info(queue: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        channel = await get_rabbitmq_client()
        queue_obj = await channel.declare_queue(queue, durable=True)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ—á–µ—Ä–µ–¥–∏
        queue_info = await queue_obj.declare(passive=True)
        
        return {
            "name": queue,
            "message_count": queue_info.message_count,
            "consumer_count": queue_info.consumer_count,
            "durable": queue_info.durable
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ—á–µ—Ä–µ–¥–∏ {queue}: {e}")
        return {}


async def purge_queue(queue: str) -> bool:
    """–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        channel = await get_rabbitmq_client()
        queue_obj = await channel.declare_queue(queue, durable=True)
        
        await queue_obj.purge()
        logger.info(f"‚úÖ –û—á–µ—Ä–µ–¥—å {queue} –æ—á–∏—â–µ–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ {queue}: {e}")
        return False 