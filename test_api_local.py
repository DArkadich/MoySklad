#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ª–æ–∫–∞–ª—å–Ω–æ
"""

import requests
import json
import time
from datetime import datetime

# URL API
API_BASE_URL = "http://localhost:8000"

def test_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API –∑–¥–æ—Ä–æ–≤!")
            return response.json()
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return None

def test_forecast():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        forecast_data = {
            "product_code": "60800",
            "forecast_days": 30
        }
        
        response = requests.post(
            f"{API_BASE_URL}/forecast",
            json=forecast_data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω!")
            print(f"   –¢–æ–≤–∞—Ä: {result['product_code']}")
            print(f"   –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: {result['current_stock']}")
            print(f"   –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {result['forecast_consumption']:.4f} –µ–¥/–¥–µ–Ω—å")
            print(f"   –î–Ω–µ–π –¥–æ OoS: {result['days_until_oos']}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑: {result['recommended_order']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return None

def test_auto_purchase():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        order_data = {
            "product_code": "60800",
            "forecast_days": 30
        }
        
        response = requests.post(
            f"{API_BASE_URL}/auto-purchase",
            json=order_data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ê–≤—Ç–æ–∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
            if 'purchase_order' in result:
                po = result['purchase_order']
                print(f"   –ó–∞–∫–∞–∑ ID: {po['supplier_id']}")
                print(f"   –°—É–º–º–∞: {po['total_amount']}")
                print(f"   –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {po['delivery_date']}")
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–∫–∞–∑–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ–∑–∞–∫–∞–∑–∞: {e}")
        return None

def demo_workflow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ workflow"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—É–ø–æ–∫")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
    health = test_health()
    if not health:
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   cd services/moysklad-service && python app/api_forecast.py")
        return
    
    # 2. –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç ML-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...")
    forecast = test_forecast()
    if not forecast:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # 3. –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞...")
    order = test_auto_purchase()
    if not order:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        return
    
    # 4. –ò—Ç–æ–≥–∏
    print("\n4Ô∏è‚É£ –ò—Ç–æ–≥–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("‚úÖ ML-–º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—É–ø–æ–∫")

def simulate_daily_automation():
    """–°–∏–º—É–ª—è—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    print("\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    products = ["60800", "60801", "60802", "60803", "60804"]
    
    total_checked = 0
    total_orders = 0
    
    for product_code in products:
        print(f"\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ {product_code}...")
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        forecast_data = {"product_code": product_code, "forecast_days": 30}
        try:
            response = requests.post(f"{API_BASE_URL}/forecast", json=forecast_data, timeout=5)
            if response.status_code == 200:
                forecast = response.json()
                total_checked += 1
                
                print(f"   –û—Å—Ç–∞—Ç–∫–∏: {forecast['current_stock']}")
                print(f"   –ü—Ä–æ–≥–Ω–æ–∑: {forecast['forecast_consumption']:.4f} –µ–¥/–¥–µ–Ω—å")
                print(f"   –î–Ω–µ–π –¥–æ OoS: {forecast['days_until_oos']}")
                
                # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –º–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                if forecast['days_until_oos'] <= 7 and forecast['recommended_order'] > 0:
                    order_response = requests.post(f"{API_BASE_URL}/auto-purchase", json=forecast_data, timeout=5)
                    if order_response.status_code == 200:
                        order_result = order_response.json()
                        if 'purchase_order' in order_result:
                            total_orders += 1
                            print(f"   ‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {forecast['recommended_order']} –µ–¥.")
                        else:
                            print(f"   ‚ÑπÔ∏è –ó–∞–∫–∞–∑ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {order_result.get('reason', '')}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
                else:
                    print(f"   ‚ÑπÔ∏è –û—Å—Ç–∞—Ç–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
        except requests.exceptions.RequestException:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    print(f"\nüìä –ò—Ç–æ–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:")
    print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_checked}")
    print(f"   –°–æ–∑–¥–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}")
    print(f"   –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    print("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—É–ø–æ–∫")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    demo_workflow()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    simulate_daily_automation()
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ –≤ .env")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: ./start_system.sh")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ cron –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
    print("4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –æ—Ç—á–µ—Ç—ã") 