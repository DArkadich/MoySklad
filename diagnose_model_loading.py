#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ ML-–º–æ–¥–µ–ª–µ–π
"""

import os
import pickle
import sys
import traceback
from datetime import datetime

def check_model_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê –ú–û–î–ï–õ–ò")
    print("=" * 40)
    
    model_path = "data/universal_forecast_models.pkl"
    
    if not os.path.exists(model_path):
        print(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
        return False
    
    print(f"‚úÖ –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω: {model_path}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    size = os.path.getsize(model_path)
    size_mb = size / (1024 * 1024)
    print(f"   –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
    
    return True

def test_model_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"""
    print("\nüß™ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ú–û–î–ï–õ–ò")
    print("=" * 40)
    
    model_path = "data/universal_forecast_models.pkl"
    
    try:
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑: {model_path}")
        
        with open(model_path, 'rb') as f:
            model_data = pickle.load(f)
        
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(model_data)}")
        
        if isinstance(model_data, dict):
            print(f"   –ö–ª—é—á–∏: {list(model_data.keys())}")
            
            if 'models' in model_data:
                models = model_data['models']
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
                
                for i, (product_code, model_info) in enumerate(models.items()):
                    print(f"   –ú–æ–¥–µ–ª—å {i+1}: {product_code}")
                    if isinstance(model_info, dict):
                        print(f"     –¢–∏–ø—ã: {list(model_info.keys())}")
                    else:
                        print(f"     –¢–∏–ø: {type(model_info)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print("   –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:")
        traceback.print_exc()
        return False

def test_numpy_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ numpy"""
    print("\nüì¶ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê NUMPY")
    print("=" * 40)
    
    try:
        import numpy as np
        print(f"‚úÖ NumPy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –í–µ—Ä—Å–∏—è: {np.__version__}")
        print(f"   –ü—É—Ç—å: {np.__file__}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ NumPy: {e}")
        return False

def test_sklearn_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ scikit-learn"""
    print("\nü§ñ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê SCIKIT-LEARN")
    print("=" * 40)
    
    try:
        import sklearn
        print(f"‚úÖ Scikit-learn –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –í–µ—Ä—Å–∏—è: {sklearn.__version__}")
        print(f"   –ü—É—Ç—å: {sklearn.__file__}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ scikit-learn: {e}")
        return False

def test_pickle_security():
    """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ pickle"""
    print("\nüîí –¢–ï–°–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò PICKLE")
    print("=" * 40)
    
    try:
        import pickle
        print(f"‚úÖ Pickle –¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"   –í–µ—Ä—Å–∏—è: {pickle.format_version}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        import warnings
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter("always")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            model_path = "data/universal_forecast_models.pkl"
            with open(model_path, 'rb') as f:
                model_data = pickle.load(f)
            
            if w:
                print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:")
                for warning in w:
                    print(f"   {warning.message}")
            else:
                print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ pickle: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –ó–ê–ì–†–£–ó–ö–ò –ú–û–î–ï–õ–ï–ô")
    print("=" * 50)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now()}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("–§–∞–π–ª –º–æ–¥–µ–ª–∏", check_model_file),
        ("–ò–º–ø–æ—Ä—Ç NumPy", test_numpy_import),
        ("–ò–º–ø–æ—Ä—Ç Scikit-learn", test_sklearn_import),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å Pickle", test_pickle_security),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", test_model_loading),
    ]
    
    results = []
    for name, check_func in checks:
        print(f"\n{'='*20} {name} {'='*20}")
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")
    print("="*50)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {name}")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è.")
    elif passed >= total - 1:
        print("‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.")
    else:
        print("‚ùå –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    
    print(f"\nüìÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now()}")

if __name__ == "__main__":
    main() 