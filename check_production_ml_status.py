#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ ML –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
"""

import requests
import json
import sys
from datetime import datetime
import time

def check_api_health(base_url="http://localhost:8001"):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        response = requests.get(f"{base_url}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def check_models_status(base_url="http://localhost:8001"):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π"""
    try:
        response = requests.get(f"{base_url}/models/status", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω")
            print(f"üìä –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return None

def test_forecast_api(base_url="http://localhost:8001"):
    """–¢–µ—Å—Ç API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    test_products = [
        {"product_code": "30001", "forecast_days": 30},
        {"product_code": "60800", "forecast_days": 30},
        {"product_code": "360360", "forecast_days": 30}
    ]
    
    for test_data in test_products:
        try:
            print(f"\nüì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä: {test_data['product_code']}")
            response = requests.post(
                f"{base_url}/forecast",
                json=test_data,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {test_data['product_code']}")
                print(f"   –ú–æ–¥–µ–ª–∏: {result.get('models_used', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
                print(f"   –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {result.get('forecast_consumption', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {test_data['product_code']}: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {test_data['product_code']}: {e}")

def check_container_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Docker)"""
    print("\nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    
    try:
        import subprocess
        result = subprocess.run(['docker', 'ps'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ moysklad-service
            print("\nüìã –õ–æ–≥–∏ moysklad-service:")
            logs_result = subprocess.run(
                ['docker', 'logs', 'moysklad-service', '--tail', '20'],
                capture_output=True, text=True, timeout=15
            )
            if logs_result.returncode == 0:
                print(logs_result.stdout)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ moysklad-service")
                
        else:
            print("‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
            
    except (ImportError, subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

def check_file_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    import os
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–ø–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    data_paths = [
        "./data",
        "./services/moysklad-service/data",
        "./services/ml-service/data"
    ]
    
    for path in data_paths:
        if os.path.exists(path):
            print(f"‚úÖ –ü–∞–ø–∫–∞ {path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π
            model_files = []
            for root, dirs, files in os.walk(path):
                for file in files:
                    if file.endswith(('.pkl', '.joblib')) or 'model' in file.lower():
                        model_files.append(os.path.join(root, file))
            
            if model_files:
                print(f"   üì¶ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π: {len(model_files)}")
                for model_file in model_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"      - {model_file}")
                if len(model_files) > 5:
                    print(f"      ... –∏ –µ—â–µ {len(model_files) - 5} —Ñ–∞–π–ª–æ–≤")
            else:
                print(f"   ‚ùå –§–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"‚ùå –ü–∞–ø–∫–∞ {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É real_models
    real_models_path = "./data/real_models"
    if os.path.exists(real_models_path):
        print(f"‚úÖ –ü–∞–ø–∫–∞ {real_models_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        real_models_files = os.listdir(real_models_path)
        print(f"   üì¶ –§–∞–π–ª–æ–≤ –≤ real_models: {len(real_models_files)}")
        for file in real_models_files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"      - {file}")
    else:
        print(f"‚ùå –ü–∞–ø–∫–∞ {real_models_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –º–æ–¥–µ–ª–∏ –Ω–µ –æ–±—É—á–µ–Ω—ã!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê ML –ú–û–î–ï–õ–ï–ô –í –ü–†–û–î–ê–ö–®–ï–ù–ï")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if not check_api_health():
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ó–∞–ø—É—â–µ–Ω—ã –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã?")
        print("   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø–æ—Ä—Ç? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8001)")
        print("   3. –ù–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö?")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π
    models_status = check_models_status()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    test_forecast_api()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    check_container_logs()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    check_file_system()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("\n" + "=" * 60)
    print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if models_status and models_status.get('total_models', 0) > 0:
        print("‚úÖ ML –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå ML –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏–ª–∏ –Ω–µ –æ–±—É—á–µ–Ω—ã")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π:")
        print("      ./train_models_in_container.sh")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
        print("      docker logs moysklad-service")
        print("   3. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ MoySklad")
    
    print("\nüîß –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   - docker logs moysklad-service")
    print("   - docker logs forecast-api")
    print("   - ./check_models_status.sh")

if __name__ == "__main__":
    main()
